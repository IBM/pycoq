step 0
input: (** * Induction: Proof by Induction *)

(** Before getting started, we need to import all of our
    definitions from the previous chapter: *)

From LF Require Export Basics.

query: (ObjList())
parsed: None
step 1
input: 

(* Require Export Basics. *)

(** For the [Require Export] to work, Coq needs to be able to
    find a compiled version of [Basics.v], called [Basics.vo], in a directory
    associated with the prefix [LF].  This file is analogous to the [.class]
    files compiled from [.java] source files and the [.o] files compiled from
    [.c] files.

    First create a file named [_CoqProject] containing the following line
    (if you obtained the whole volume "Logical Foundations" as a single
    archive, a [_CoqProject] should already exist and you can skip this step):

      [-Q . LF]

    This maps the current directory ("[.]", which contains [Basics.v],
    [Induction.v], etc.) to the prefix (or "logical directory") "[LF]".
    PG and CoqIDE read [_CoqProject] automatically, so they know to where to
    look for the file [Basics.vo] corresponding to the library [LF.Basics].

    Once [_CoqProject] is thus created, there are various ways to build
    [Basics.vo]:

     - In Proof General: The compilation can be made to happen automatically
       when you submit the [Require] line above to PG, by setting the emacs
       variable [coq-compile-before-require] to [t].

     - In CoqIDE: Open [Basics.v]; then, in the "Compile" menu, click
       on "Compile Buffer".

     - From the command line: Generate a [Makefile] using the [coq_makefile]
       utility, that comes installed with Coq (if you obtained the whole
       volume as a single archive, a [Makefile] should already exist
       and you can skip this step):

         [coq_makefile -f _CoqProject *.v -o Makefile]

       Note: You should rerun that command whenever you add or remove Coq files
       to the directory.

       Then you can compile [Basics.v] by running [make] with the corresponding
       [.vo] file as a target:

         [make Basics.vo]

       All files in the directory can be compiled by giving no arguments:

         [make]

       Under the hood, [make] uses the Coq compiler, [coqc].  You can also
       run [coqc] directly:

         [coqc -Q . LF Basics.v]

       But [make] also calculates dependencies between source files to compile
       them in the right order, so [make] should generally be prefered over
       explicit [coqc].

    If you have trouble (e.g., if you get complaints about missing
    identifiers later in the file), it may be because the "load path"
    for Coq is not set up correctly.  The [Print LoadPath.] command
    may be helpful in sorting out such issues.

    In particular, if you see a message like

        [Compiled library Foo makes inconsistent assumptions over
        library Bar]

    check whether you have multiple installations of Coq on your machine.
    It may be that commands (like [coqc]) that you execute in a terminal
    window are getting a different version of Coq than commands executed by
    Proof General or CoqIDE.

    - Another common reason is that the library [Bar] was modified and
      recompiled without also recompiling [Foo] which depends on it.  Recompile
      [Foo], or everything if too many files are affected.  (Using the third
      solution above: [make clean; make].)

    One more tip for CoqIDE users: If you see messages like [Error:
    Unable to locate library Basics], a likely reason is
    inconsistencies between compiling things _within CoqIDE_ vs _using
    [coqc] from the command line_.  This typically happens when there
    are two incompatible versions of [coqc] installed on your
    system (one associated with CoqIDE, and one associated with [coqc]
    from the terminal).  The workaround for this situation is
    compiling using CoqIDE only (i.e. choosing "make" from the menu),
    and avoiding using [coqc] directly at all. *)

(* ################################################################# *)
(** * Proof by Induction *)

(** We proved in the last chapter that [0] is a neutral element
    for [+] on the left, using an easy argument based on
    simplification.  We also observed that proving the fact that it is
    also a neutral element on the _right_... *)

Theorem plus_n_O_firsttry: forall n: nat,
    n = n + 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 3))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 3]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 2
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 3))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 3]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 3
input:   intros n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 4))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 4]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 4
input:   simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 6))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 6]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 5
input: Abort.

query: (ObjList())
parsed: None
step 6
input: 


Theorem plus_n_O_firsttry : forall n:nat,
  n = n + 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 6))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 6]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 7
input: 
(** ... can't be done in the same simple way.  Just applying
  [reflexivity] doesn't work, since the [n] in [n + 0] is an arbitrary
  unknown number, so the [match] in the definition of [+] can't be
  simplified.  *)

Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 6))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 6]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 8
input:   intros n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 7))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 7]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 9
input:   simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 9))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 9]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 10
input: (* Does nothing! *)
Abort.

query: (ObjList())
parsed: None
step 11
input: 
(** And reasoning by cases using [destruct n] doesn't get us much
    further: the branch of the case analysis where we assume [n = 0]
    goes through fine, but in the branch where [n = S n'] for some [n'] we
    get stuck in exactly the same way. *)

Theorem plus_n_O_secondtry : forall n:nat,
  n = n + 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 9))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 9]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 12
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 9))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 9]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 13
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 10))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 10]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 14
input: destruct n as [| n'] eqn:E.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 22))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id E))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'"))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'"))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id E))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'")))))))(((Id n)(Id"n'"))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 22]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, E]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, E]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]]]]), Hyp(ids=[[Id, n], [Id, "n'"]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 15
input:   - (* n = 0 *)
    reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'"))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'"))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id E))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'")))))))(((Id n)(Id"n'"))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, E]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]]]]), Hyp(ids=[[Id, n], [Id, "n'"]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 16
input: (* so far so good... *)
  - (* n = S n' *)
    simpl.       
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 28))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'"))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id"n'"))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))(hyp((((Id E))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id"n'")))))))(((Id n)(Id"n'"))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 28]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, "n'"]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], hyp=[Hyp(ids=[[Id, E]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, "n'"]]]]]]), Hyp(ids=[[Id, n], [Id, "n'"]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 17
input: (* ...but here we are stuck again *)
Abort.

query: (ObjList())
parsed: None
step 18
input: 
(** We could use [destruct n'] to get one step further, but,
    since [n] can be arbitrarily large, if we just go on like this
    we'll never finish. *)

(** To prove interesting facts about numbers, lists, and other
    inductively defined sets, we usually need a more powerful
    reasoning principle: _induction_.

    Recall (from high school, a discrete math course, etc.) the
    _principle of induction over natural numbers_: If [P(n)] is some
    proposition involving a natural number [n] and we want to show
    that [P] holds for all numbers [n], we can reason like this:
         - show that [P(O)] holds;
         - show that, for any [n'], if [P(n')] holds, then so does
           [P(S n')];
         - conclude that [P(n)] holds for all [n].

    In Coq, the steps are the same: we begin with the goal of proving
    [P(n)] for all [n] and break it down (by applying the [induction]
    tactic) into two separate subgoals: one where we must show [P(O)]
    and another where we must show [P(n') -> P(S n')].  Here's how
    this works for the theorem at hand: *)

Theorem plus_n_O: forall n: nat, n = n + 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 12))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 12]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 19
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 13))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 13]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 20
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 17))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 20))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 17]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 21
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 23))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 20))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 23]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 22
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 20))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 23
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 24
input: rewrite <- IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 28))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 28]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 25
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 26
input: Qed.

query: (ObjList())
parsed: None
step 27
input: 


Theorem minus_diag: forall n,
    minus n n = 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 16))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Rel 1)(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 16]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Rel, 1], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 28
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 16))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Rel 1)(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 16]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Rel, 1], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 29
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 17))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Var(Id n))(Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 17]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 30
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 21))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 21]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 31
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 32
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 33
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 31))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 31]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 34
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 32))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id sub))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 32]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, sub]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 35
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 36
input: Qed.

query: (ObjList())
parsed: None
step 37
input: 


Theorem mult_0_r: forall n: nat,
    n * 0 = 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 19))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 19]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 38
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 19))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 19]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 39
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 20))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 40
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 41
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 30))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 30]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 42
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 43
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 35))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 44
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 36))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n1))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 36]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n1]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 45
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 46
input: Qed.

query: (ObjList())
parsed: None
step 47
input: 
Theorem plus_n_Sm: forall n m: nat,  S (n + m) = n + (S m).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 22))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 22]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 48
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 22))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 22]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 49
input:   intros n m. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 50
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 28))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 32))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 28]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 32]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 51
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 36))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 32))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 36]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 32]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 52
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 32))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 32]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 53
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 41))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 41]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 54
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 42))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 42]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 55
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 56
input: Qed.

query: (ObjList())
parsed: None
step 57
input: 

Theorem plus_comm: forall n m: nat, n + m = m + n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 25))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 58
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 25))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 59
input:   intros n m. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 60
input: induction n as [|n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 31))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 35))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 31]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 61
input:   - rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 36))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Var(Id m)))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 35))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 36]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Var, [Id, m]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 62
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(Var(Id m)))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 35))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [Var, [Id, m]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 63
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 35))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 64
input:   - rewrite <- plus_n_Sm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 41))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 41]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 65
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 44))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 44]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 66
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 45))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1)))))))(((Id n1)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 45]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 67
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 68
input: Qed.

query: (ObjList())
parsed: None
step 69
input: 


Theorem plus_assoc: forall n m p: nat, n + (m + p) = (n + m) + p.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 28))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 2)))(Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 28]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 70
input:   intros n m p. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 31))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 31]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 71
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 35))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Var(Id p)))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(Var(Id p)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 72
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 44))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p)))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(Var(Id p)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 44]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 73
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(Var(Id p)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 74
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 50))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 50]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 75
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 51))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 51]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 76
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 77
input: Qed.

query: (ObjList())
parsed: None
step 78
input: 


Fixpoint double (n: nat) :=
  match n with
  | O => 0
  | S n' => S (S (double n'))
  end.

query: (ObjList())
parsed: None
step 79
input: 
Lemma double_plus: forall n, double n = n + n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 35))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 80
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 36))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 36]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 81
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 40))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 43))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id n1)))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 40]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 43]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 82
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 47))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 43))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id n1)))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 47]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 43]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 83
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 43))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id n1)))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 43]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 84
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 52))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n1))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id n1)))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 52]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n1]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 85
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 53))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id n1))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id n1)))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 53]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 86
input: rewrite -> plus_n_Sm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id double))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id n1)))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, double]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 87
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 88
input: Qed.

query: (ObjList())
parsed: None
step 89
input: 

Theorem evenb_S: forall n: nat,
    evenb (S n) = negb (evenb n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 38))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 38]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 90
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 38))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 38]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 91
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n)))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 92
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 43))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))(hyp()))((info((evar(Ser_Evar 46))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 43]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 46]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 93
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 50))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 46))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 50]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 46]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 94
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 46))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 46]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 95
input:   - rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 52))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 52]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 96
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 97
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 57))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 98
input: rewrite -> negb_involutive. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 58))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id evenb))(Instance())))((Var(Id n1)))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 58]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, evenb]], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 99
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 100
input: Qed.

query: (ObjList())
parsed: None
step 101
input: 
(** **** Exercise: 1 star, standard (destruct_induction)  

    Briefly explain the difference between the tactics [destruct]
    and [induction].

 destruct: expands the definition of function
 induction: creates two subgoals to prove by induction. 
 *)

Definition manual_grade_for_destruct_induction : option (nat*string) := None.

query: (ObjList())
parsed: None
step 102
input: (** [] *)


Theorem mult_0_plus': forall n m: nat,
    (0 + n) * m = n * m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 42))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 42]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 103
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 42))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 42]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 104
input:   intros n m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 44))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 44]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 105
input:   assert (H: 0 + n = n). 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 47))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id n)))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 49))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id n)))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 47]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 49]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 106
input: { reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 49))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id n)))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 49]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 107
input: }
                         rewrite -> H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 51))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id n)))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 51]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 108
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 109
input: Qed.

query: (ObjList())
parsed: None
step 110
input: 

(** For example, suppose we want to prove that [(n + m) + (p + q)
    = (m + n) + (p + q)]. The only difference between the two sides of
    the [=] is that the arguments [m] and [n] to the first inner [+]
    are swapped, so it seems we should be able to use the
    commutativity of addition ([plus_comm]) to rewrite one into the
    other.  However, the [rewrite] tactic is not very smart about
    _where_ it applies the rewrite.  There are three uses of [+] here,
    and it turns out that doing [rewrite -> plus_comm] will affect
    only the _outer_ one... *)


Theorem plus_rearrange_firsttry: forall n m p q: nat,
    (n + m) + (p + q) = (m + n) + (p + q).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 45))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id q)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 4)(Rel 3)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 4)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 45]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, q]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 4], [Rel, 3]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 4]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 111
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 45))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id q)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 4)(Rel 3)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 4)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 45]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, q]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 4], [Rel, 3]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 4]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 112
input:   intros n m p q. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 49))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q)))))))))(hyp((((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 49]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 113
input: rewrite plus_comm.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 50))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q)))))))))(hyp((((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 50]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 114
input: Abort. 
query: (ObjList())
parsed: None
step 115
input: (* does not work, coq rewrites the wrong plus! *)


Theorem plus_rearrange_secondtry: forall n m p q: nat,
    (n + m) + (p + q) = (m + n) + (p + q).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 48))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id q)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 4)(Rel 3)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 4)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 48]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, q]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 4], [Rel, 3]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 4]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 116
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 48))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id q)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 4)(Rel 3)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 4)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 48]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, q]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 4], [Rel, 3]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 4]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 117
input:   intros n m p q.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 52))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q)))))))))(hyp((((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 52]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 118
input:   assert (H: n + m = m + n). 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(hyp((((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 57))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 119
input: { rewrite -> plus_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 58))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(hyp((((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 57))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 58]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 120
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 57))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 121
input: }
                             rewrite -> H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 60))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id q)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p)(Id q))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 60]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, q]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p], [Id, q]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 122
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 123
input: Qed.

query: (ObjList())
parsed: None
step 124
input: 


(* 
    Because we are using Coq in this course, we will be working
    heavily with formal proofs.  But this doesn't mean we can
    completely forget about informal ones!  Formal proofs are useful
    in many ways, but they are _not_ very efficient ways of
    communicating ideas between human beings. *)

(** For example, here is a proof that addition is associative: *)

Theorem plus_assoc': forall n m p: nat,
    n + (m + p) = (n + m) + p.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 51))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 2)))(Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 51]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 125
input: Proof. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 51))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 2)))(Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 51]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 126
input: intros n m p. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 127
input: induction n as [| n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 58))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Var(Id p)))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 62))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(Var(Id p)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 58]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 62]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 128
input:        - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 62))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(Var(Id p)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 62]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 129
input:        - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 68))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 68]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 130
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 69))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 69]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 131
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 132
input: Qed.

query: (ObjList())
parsed: None
step 133
input: 
Theorem plus_assoc'': forall n m p: nat,
    n + (m + p) = (n + m) + p.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 54))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 2)))(Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 134
input:   intros n m p. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 57))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 135
input: induction n as [|n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 61))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Var(Id p)))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 65))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(Var(Id p)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 61]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 136
input:   - (* n = 0 *)
    reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 65))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Var(Id m))))(Var(Id p)))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 137
input:   - (* n = S n' *)
    simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 71))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 71]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 138
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 72))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))(Var(Id p)))))))(((Id n1)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 72]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]), Hyp(ids=[[Id, n1], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 139
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 140
input: Qed.

query: (ObjList())
parsed: None
step 141
input: 

Theorem plus_comm1: forall n m: nat, n + m = m + n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 57))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 142
input: Proof. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 57))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 143
input: induction n as [|n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 62))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 62]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 144
input:        - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 68))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 68]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 145
input: induction m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 73))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 76))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 73]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 76]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 146
input:          { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 79))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 76))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 79]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 76]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 147
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 76))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 76]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 148
input: }
         { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 83))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 83]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 149
input: rewrite <- IHm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 84))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 84]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 150
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 151
input: }
       - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 88))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 88]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 152
input: intros m. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 153
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 90))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 90]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 154
input: simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 92))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 92]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 155
input:          induction m as [|m1 IHm1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 96))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 99))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m1))))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHm1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(((Id m1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 99]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m1]]]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, m1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 156
input:          { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))(hyp((((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 99))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m1))))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHm1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(((Id m1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 99]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m1]]]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, m1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 157
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 99))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m1))))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(hyp((((Id IHm1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(((Id m1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 99]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m1]]]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, m1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 158
input: }
         { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(Var(Id n1))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHm1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(((Id m1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [Var, [Id, n1]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHm1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, m1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 159
input: rewrite -> IHm1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 109))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))))(hyp((((Id IHm1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(Var(Id n1))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m1))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1)))))))))(((Id m1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn1))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n1))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Var(Id n1))))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 109]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHm1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [Var, [Id, n1]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m1]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]]]]), Hyp(ids=[[Id, m1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn1]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n1]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Var, [Id, n1]]]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 160
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 161
input: }
Qed.

query: (ObjList())
parsed: None
step 162
input: 
(* Do not modify the following line: *)
Definition manual_grade_for_plus_comm_informal : option (nat*string) := None.

query: (ObjList())
parsed: None
step 163
input: (** [] *)



(* We'll prove that n + m = m + n by induction on n. 
  - first we'll need to show that 0 + m = m + 0. 
       this we'll show by induction on m
              - 0 + 0 = 0 + 0 follows from reflexivity
              - from 0 + m = m + 0  need to show that 0 + Sm = Sm + 0
                by def of + we have 0 + Sm = Sm
                and Sm + 0 = S(m + 0) = (by induction hypothesis) = Sm
 - now from n + m = m + n we'll show Sn + m = m + Sn
   by def of + we've got Sn + m = S(n + m)
   by induction hypothesis we have S(n + m) = S(m + n)
   need to show that S(m + n) = m + Sn
   we'll do induction on m:
     - prove that S(0 + n) = 0 + Sn; from def of + we've got Sn = Sn
     - now show that S(Sm + n) = Sm + Sn, indeed, by def of + we've got
     to show that S(S(m+n)) = S(m + Sn) which follows from induction hypothesis 
 *)





(** **** Exercise: 2 stars, standard, optional (eqb_refl_informal)  

    Write an informal proof of the following theorem, using the
    informal proof of [plus_assoc] as a model.  Don't just
    paraphrase the Coq tactics into English!

    Theorem: [true = n =? n] for any [n].


    [] *)
Fixpoint eqb (n m : nat) : bool :=
  match n with
  | O => match m with
         | O => true
         | S m' => false
         end
  | S n' => match m with
            | O => false
            | S m' => eqb n' m'
            end
  end.

query: (ObjList())
parsed: None
step 164
input: 
Theorem eqb_refl: forall n, eqb n n = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 62))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Rel 1)(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 62]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Rel, 1], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 165
input: Proof. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 62))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Rel 1)(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 62]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Rel, 1], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 166
input: induction n as [|n1 IHn1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 67))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 70))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 67]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 70]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 167
input:        - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 73))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 70))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 73]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 70]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 168
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 70))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 70]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 169
input:        - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 77))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 77]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 170
input: rewrite -> IHn1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 78))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id IHn1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id eqb))(Instance())))((Var(Id n1))(Var(Id n1))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 78]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n1]], [Var, [Id, n1]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 171
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 172
input: Qed.

query: (ObjList())
parsed: None
step 173
input: 


(* ################################################################# *)
(** * More Exercises *)

(** **** Exercise: 3 stars, standard, recommended (mult_comm)  

    Use [assert] to help prove this theorem.  You shouldn't need to
    use induction on [plus_swap]. *)

Theorem plus_swap : forall n m p : nat,
    n + (m + p) = m + (n + p).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 1)))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 1]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 174
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 65))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 1)))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 1]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 175
input:   intros n m p. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 68))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id p)))))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 68]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 176
input: rewrite -> plus_assoc. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 69))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id p)))))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 69]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 177
input: rewrite -> plus_assoc.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 70))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 70]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 178
input:   assert (H: n + m = m + n). 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 73))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 75))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 73]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 75]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 179
input: { rewrite -> plus_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 76))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 75))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 76]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 75]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 180
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 75))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 75]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 181
input: }
                             rewrite -> H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 78))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n)))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 78]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 182
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 183
input: Qed.

query: (ObjList())
parsed: None
step 184
input: 

Theorem mult_one: forall n: nat,  1 * n = n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 68))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Rel 1)))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 68]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 1]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 185
input: Proof.  
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 68))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Rel 1)))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 68]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 1]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 186
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 72))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 72]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 187
input: intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 73))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 73]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 188
input: rewrite plus_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 74))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 74]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 189
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 77))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 77]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 190
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 191
input: Qed.

query: (ObjList())
parsed: None
step 192
input: 

Theorem mult_one1: forall n: nat,  n * 1 = n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 71))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 71]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 193
input: Proof. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 71))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 71]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 194
input: intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 72))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 72]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 195
input: induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 76))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 79))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 76]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 79]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 196
input:        - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 82))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 79))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 82]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 79]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 197
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 79))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 79]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 198
input:        -  simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 88))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 88]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 199
input: rewrite -> IHn. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 200
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 201
input: Qed.

query: (ObjList())
parsed: None
step 202
input: 

Theorem mult_zero: forall n: nat, 0 * n = 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 74))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 74]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 203
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 75))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 75]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 204
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 78))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 78]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 205
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 206
input: Qed.

query: (ObjList())
parsed: None
step 207
input: 
Theorem mult_zero1: forall n: nat,  n * 0 = 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 77))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 77]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 208
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 78))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 78]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 209
input: induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 82))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 85))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 82]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 85]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 210
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 88))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 85))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 88]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 85]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 211
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 85))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 85]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 212
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 213
input: exact IHn. 
query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 214
input: Qed.

query: (ObjList())
parsed: None
step 215
input: 
Theorem aux_lemma: forall m n: nat, n * m + n = n * S m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 80))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 2))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 80]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 216
input:   intros m n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 82))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 82]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 217
input: induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 86))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 86]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 218
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 94))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 94]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 219
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 220
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 101))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 101]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 221
input: rewrite <- IHn.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 102))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 102]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 222
input:     assert (H: m + (n * m + n) = m + n * m + n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 105))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 107))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 105]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 223
input:     { rewrite plus_assoc. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 107))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 224
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 107))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 225
input: }
    rewrite -> H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 110))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 110]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 226
input: assert (H1: m + n * m + S n = S n + m + n * m).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 113))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 115))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 113]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 115]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 227
input:     { rewrite plus_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 116))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 115))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 116]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 115]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 228
input: rewrite plus_assoc. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 117))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 115))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 115]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 229
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 115))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 115]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 230
input: }
    rewrite -> H1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 119))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 119]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 231
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 123))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 123]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 232
input: assert ( m + n * m + n = n + (m  + n * m)).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 126))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 127))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 126]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 127]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 233
input:     { rewrite plus_comm.  
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 128))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 127))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 128]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 127]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 234
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 127))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))))(hyp((((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 127]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 235
input: }
    rewrite -> H0. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))))(hyp((((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 236
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 132))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))))(hyp((((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 132]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 237
input: assert ( n + (m + n * m) = (n + m) + n * m).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 135))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(hyp((((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))))(hyp((((Id H2))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 135]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H2]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 238
input:     { rewrite plus_assoc. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 137))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(hyp((((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))))(hyp((((Id H2))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 137]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H2]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 239
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))))(hyp((((Id H2))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H2]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 240
input: }
    rewrite -> H2. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 139))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(hyp((((Id H2))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H0))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))))(((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id n)))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 139]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]], hyp=[Hyp(ids=[[Id, H2]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H0]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]]]), Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 241
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 242
input: Qed.

query: (ObjList())
parsed: None
step 243
input: 
  

  (* FILL IN HERE *)

(** Now prove commutativity of multiplication.  (You will probably
    need to define and prove a separate subsidiary theorem to be used
    in the proof of this one.  You may find that [plus_swap] comes in
    handy.) *)


Theorem mult_comm: forall m n: nat, m * n = n * m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 83))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 83]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 244
input:   intros m n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 85))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 85]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 245
input: induction m. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 246
input: simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 96))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 247
input:   induction n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 100))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 100]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 248
input: { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 106))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 106]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 249
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 250
input: }
               { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 111))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 111]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 251
input: exact IHn. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 252
input: }
               { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 114))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 114]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 253
input: rewrite -> IHm.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 115))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 115]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 254
input:                  rewrite plus_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 116))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 116]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 255
input: rewrite -> aux_lemma. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 117))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m)))))))))(hyp((((Id IHm))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(((Id m)(Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]]), Hyp(ids=[[Id, m], [Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 256
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 257
input: }
Qed.

query: (ObjList())
parsed: None
step 258
input: 



(** **** Exercise: 3 stars, standard, optional (more_exercises)  

    Take a piece of paper.  For each of the following theorems, first
    _think_ about whether (a) it can be proved using only
    simplification and rewriting, (b) it also requires case
    analysis ([destruct]), or (c) it also requires induction.  Write
    down your prediction.  Then fill in the proof.  (There is no need
    to turn in your piece of paper; this is just to encourage you to
    reflect before you hack!) *)



Theorem leb_refl : forall n:nat,   true = (n <=? n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 86))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Rel 1)(Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 86]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Rel, 1], [Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 259
input:   induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 91))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 94))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 91]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 94]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 260
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 97))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 94))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 97]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 94]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 261
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 94))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 94]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 262
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 101))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 101]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 263
input: exact IHn.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 264
input: Qed.

query: (ObjList())
parsed: None
step 265
input: 

Theorem zero_nbeq_S : forall n:nat,
  0 =? (S n) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 89))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1)))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 266
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 89))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1)))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 267
input:   destruct n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 94))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 96))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 94]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 268
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 99))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 96))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 99]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 269
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 96))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 270
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 271
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 272
input: Qed.

query: (ObjList())
parsed: None
step 273
input: 
Theorem andb_false_r : forall b : bool, andb b false = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 92))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 92]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 274
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 92))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 1)(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 92]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 275
input:   destruct b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 97))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 98))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 97]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 98]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 276
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 100))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 98))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 100]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 98]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 277
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 98))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 98]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 278
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 279
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 280
input: Qed.

query: (ObjList())
parsed: None
step 281
input: 

Theorem plus_ble_compat_l : forall n m p : nat,
  n <=? m = true -> (p + n) <=? (p + m) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 97))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Rel 3)(Rel 2)))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 4)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 3)))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 97]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 4]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 3]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 282
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 97))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Rel 3)(Rel 2)))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 4)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 3)))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 97]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 4]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 3]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 283
input:   induction p.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 104))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 107))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id IHp))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 104]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, IHp]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 284
input:   - intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 107))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id IHp))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, IHp]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 285
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 113))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 107))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id IHp))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 113]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, IHp]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 286
input: exact H.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 107))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id p))))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id IHp))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, p]]]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, IHp]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 287
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 118))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id IHp))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((Var(Id n))(Var(Id m))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(Var(Id m))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 118]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, IHp]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [Var, [Id, m]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 288
input: exact IHp.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 289
input: Qed.

query: (ObjList())
parsed: None
step 290
input: 

Theorem S_nbeq_0: forall n: nat,  (S n ) =? 0 = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 100))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 100]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 291
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 101))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 101]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 292
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 104))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 104]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 293
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 294
input: Qed.

query: (ObjList())
parsed: None
step 295
input: 

Theorem mult_1_l: forall n: nat,  1 * n = n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 103))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Rel 1)))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 1]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 296
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 104))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Var(Id n))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 104]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 297
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 298
input: rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 109))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 109]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 299
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 300
input: Qed.

query: (ObjList())
parsed: None
step 301
input: 


Theorem all3_spec : forall b c : bool,    orb
      (andb b c)
      (orb (negb b)
               (negb c))
    = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 106))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 2)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 106]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 2]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 302
input:   destruct b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 111))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))((info((evar(Ser_Evar 112))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 111]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 112]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 303
input:   - destruct c. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 117))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 118))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 112))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 118]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 112]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 304
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 120))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 118))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 112))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 120]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 118]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 112]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 305
input: reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 118))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 112))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 118]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 112]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 306
input:     simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 123))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 112))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 123]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 112]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 307
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 112))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 112]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 308
input:   - destruct c. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 129))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 129]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 309
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 132))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 132]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 310
input: reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 311
input:     simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 135))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 135]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 312
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 313
input: Qed.

query: (ObjList())
parsed: None
step 314
input: 
Theorem  mult_plus_distr_r: forall n m p: nat, (n + m) * p = (n * p) + (m * p).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 109))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 3)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 109]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 3], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 315
input:   induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 114))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp()))((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 114]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 316
input:   { induction m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 122))(name())))(ty(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))))))))(hyp()))((info((evar(Ser_Evar 125))(name())))(ty(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Rel 1)))))))))(hyp((((Id IHm))()(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Rel 1)))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 122]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Rel, 1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Rel, 1]]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 317
input:     - intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 126))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id p)))))))))(hyp((((Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 125))(name())))(ty(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Rel 1)))))))))(hyp((((Id IHm))()(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Rel 1)))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 126]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Rel, 1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Rel, 1]]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 318
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 133))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 125))(name())))(ty(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Rel 1)))))))))(hyp((((Id IHm))()(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Rel 1)))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 133]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Rel, 1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Rel, 1]]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 319
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 125))(name())))(ty(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id m))))(Rel 1)))))))))(hyp((((Id IHm))()(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Rel 1)))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(()(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, m]]]], [Rel, 1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Rel, 1]]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 320
input:     - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 141))(name())))(ty(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Rel 1)))))))))(hyp((((Id IHm))()(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id m))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Rel 1)))))))))(((Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 141]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Rel, 1]]]]]]]], hyp=[Hyp(ids=[[Id, IHm]], define=None, typ=[Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, m]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Rel, 1]]]]]]]]), Hyp(ids=[[Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 321
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 322
input:   }
  { intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 145))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p)))))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 145]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 323
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 151))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p)))))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 151]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 324
input: rewrite -> IHn. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 152))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p)))))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 152]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 325
input: rewrite -> plus_assoc. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id p))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p)))))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, p]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 326
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 327
input: }
Qed.

query: (ObjList())
parsed: None
step 328
input: 

Theorem mult_assoc: forall n m p: nat, n * (m * p) = (n * m) * p.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 112))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 3)(Rel 2)))(Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 112]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 329
input:   induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 2)))(Rel 1))))))))(hyp()))((info((evar(Ser_Evar 120))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))(Rel 1))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 2]]], [Rel, 1]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 120]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 330
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 125))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 120))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))(Rel 1))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 120]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 331
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 120))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Rel 2)))(Rel 1))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))(Rel 1))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 120]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Rel, 2]]], [Rel, 1]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 332
input: }
  { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 133))(name())))(ty(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))))(Rel 1))))))))(hyp((((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))(Rel 1))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 133]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]]]], [Rel, 1]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 333
input: intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 135))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id p)))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))(Rel 1))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 135]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 334
input: rewrite -> IHn. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))))(Var(Id p)))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))(Rel 1))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 335
input: rewrite mult_plus_distr_r. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 137))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p)))))))))(hyp((((Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(((Id IHn))()(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Rel 2)))(Rel 1))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 137]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Rel, 2]]], [Rel, 1]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 336
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 337
input: }
Qed.

query: (ObjList())
parsed: None
step 338
input: 
(** **** Exercise: 2 stars, standard, optional (eqb_refl)  

    Prove the following theorem.  (Putting the [true] on the left-hand
    side of the equality may look odd, but this is how the theorem is
    stated in the Coq standard library, so we follow suit.  Rewriting
    works equally well in either direction, so we will have no problem
    using the theorem no matter which way we state it.) *)

Theorem eqb_refl': forall n: nat, true = (n =? n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 115))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Rel 1)(Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 115]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Rel, 1], [Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 339
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 116))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Var(Id n))(Var(Id n)))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 116]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 340
input: induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 120))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 123))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 120]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 123]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 341
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 126))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 123))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 126]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 123]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 342
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 123))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 123]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 343
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Var(Id n))(Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Var(Id n))(Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 344
input: exact IHn. 

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 345
input: Qed.

query: (ObjList())
parsed: None
step 346
input: 

(** **** Exercise: 2 stars, standard, optional (plus_swap')  

    The [replace] tactic allows you to specify a particular subterm to
   rewrite and what you want it rewritten to: [replace (t) with (u)]
   replaces (all copies of) expression [t] in the goal by expression
   [u], and generates [t = u] as an additional subgoal. This is often
   useful when a plain [rewrite] acts on the wrong part of the goal.

   Use the [replace] tactic to do a proof of [plus_swap'], just like
   [plus_swap] but without needing [assert (n + m = m + n)]. *)


Theorem plus_swap': forall n m p: nat, n + (m + p) = m + (n + p).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 118))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 1)))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 118]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 1]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 347
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 121))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id p))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id p)))))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 121]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, p]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 348
input: rewrite plus_assoc. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 122))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id p)))))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 122]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, p]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 349
input: rewrite plus_assoc.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 123))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 123]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 350
input:   replace (n + m) with (m + n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 127))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(Var(Id p)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 125))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 127]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [Var, [Id, p]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 351
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 125))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 352
input:   - rewrite plus_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id n)(Id m)(Id p))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, p]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 353
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 354
input: Qed.

query: (ObjList())
parsed: None
step 355
input: 






(** **** Exercise: 3 stars, standard, recommended (binary_commute)  

    Recall the [incr] and [bin_to_nat] functions that you
    wrote for the [binary] exercise in the [Basics] chapter.  Prove
    that the following diagram commutes:

                            incr
              bin ----------------------> bin
               |                           |
    bin_to_nat |                           |  bin_to_nat
               |                           |
               v                           v
              nat ----------------------> nat
                             S

    That is, incrementing a binary number and then converting it to
    a (unary) natural number yields the same result as first converting
    it to a natural number and then incrementing.
    Name your theorem [bin_to_nat_pres_incr] ("pres" for "preserves").

    Before you start working on this exercise, copy the definitions
    from your solution to the [binary] exercise here so that this file
    can be graded on its own.  If you want to change your original
    definitions to make the property easier to prove, feel free to
    do so! *)

(* FILL IN HERE *)

(* Do not modify the following line: *)

Theorem S_plus: forall a b: nat, S (a + b) = a + S b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 121))(name())))(ty(Prod((binder_name(Name(Id a)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 121]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, a]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 356
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 123))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id a)(Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 123]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, a], [Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 357
input: induction a.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 127))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))((info((evar(Ser_Evar 131))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id a))))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id a))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHa))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(((Id a)(Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 127]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 131]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, a]]]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, a]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHa]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, a], [Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 358
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 135))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 131))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id a))))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id a))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHa))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(((Id a)(Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 135]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 131]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, a]]]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, a]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHa]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, a], [Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 359
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 131))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id a))))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id a))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHa))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(((Id a)(Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 131]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, a]]]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, a]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHa]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, a], [Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 360
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHa))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(((Id a)(Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHa]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, a], [Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 361
input: rewrite -> IHa. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 141))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHa))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id a))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id b)))))))))(((Id a)(Id b))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 141]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHa]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, a]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, a], [Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 362
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 363
input: Qed.

query: (ObjList())
parsed: None
step 364
input: 

Theorem binary_commute: forall n: bin, bin_to_nat (incr n) = S (bin_to_nat n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 124))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 124]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 365
input:   induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(hyp()))((info((evar(Ser_Evar 134))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 134]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 366
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 154))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 134))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 154]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 134]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 367
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 134))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 134]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 368
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 170))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 170]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 369
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 370
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 186))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 371
input: assert (H: bin_to_nat (incr n) + 0 = bin_to_nat (incr n)).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 189))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 191))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 189]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 372
input:     { rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 192))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 191))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 192]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 373
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 191))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 374
input: }
    assert (H1: bin_to_nat n + 0 = bin_to_nat n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 196))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 198))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 196]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 198]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 375
input:     { rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 199))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 198))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 199]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 198]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 376
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 198))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 198]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 377
input: }
    { rewrite -> H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 378
input: rewrite H1.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 202))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 202]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 379
input:       simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 204))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 204]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 380
input: rewrite -> IHn. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 205))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 205]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 381
input: simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 208))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 208]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 382
input:       rewrite <- S_plus. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 209))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n)))))))))(((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id n))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 209]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 383
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 384
input:     }
Qed.

query: (ObjList())
parsed: None
step 385
input: 
Definition manual_grade_for_binary_commute : option (nat*string) := None.

query: (ObjList())
parsed: None
step 386
input: (** [] *)

(** **** Exercise: 5 stars, advanced (binary_inverse)  

    This is a further continuation of the previous exercises about
    binary numbers.  You may find you need to go back and change your
    earlier definitions to get things to work here.

    (a) First, write a function to convert natural numbers to binary
        numbers. *)

Fixpoint nat_to_bin (n: nat): bin :=
  match n with
  | O => Z
  | S n => incr (nat_to_bin n)
  end.

query: (ObjList())
parsed: None
step 387
input: 

Theorem  helper_nat_bin: forall b: bin, bin_to_nat (incr b) = S (bin_to_nat b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 128))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 128]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 388
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 129))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 129]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 389
input: simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 131))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 131]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 390
input:   induction b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(hyp()))((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 142))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 142]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 391
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 142))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 142]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 392
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 142))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 142]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 393
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 176))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 142))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 176]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 142]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 394
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 142))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 142]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 395
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 192))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 192]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 396
input: rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 193))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 193]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 397
input: rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 194))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 398
input: simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 196))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 196]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 399
input:     rewrite IHb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 197))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 197]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 400
input: rewrite <- S_plus. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 198))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 198]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 401
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 402
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 403
input: Qed.

query: (ObjList())
parsed: None
step 404
input: 
    
Theorem nat_bin_nat: forall n, bin_to_nat (nat_to_bin n) = n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 132))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Rel 1)))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 132]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 405
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 133))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 133]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 406
input: induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 137))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 137]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 407
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 145))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 145]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 408
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 409
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 150))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 150]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 410
input: rewrite -> helper_nat_bin. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 151))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 151]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 411
input: rewrite -> IHn. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 152))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(Var(Id n)))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 152]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [Var, [Id, n]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 412
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 413
input: Qed.

query: (ObjList())
parsed: None
step 414
input: 



(* Do not modify the following line: *)
Definition manual_grade_for_binary_inverse_a : option (nat*string) := None.

query: (ObjList())
parsed: None
step 415
input: 
(** (b) One might naturally expect that we should also prove the
        opposite direction -- that starting with a binary number,
        converting to a natural, and then back to binary should yield
        the same number we started with.  However, this is not the
        case!  Explain (in a comment) what the problem is. *)

(* The problem is that we can add leading zeroes without changing the binary 
number *) 

Compute bin_to_nat (A (B Z)).             
query: (ObjList())
parsed: None
step 416
input: (* 2 *)
Compute bin_to_nat (A (B (A (A Z)))).

query: (ObjList())
parsed: None
step 417
input: 
(* FILL IN HERE *)



(* it is very difficult to prove when normalization function is defined using the reverse

Fixpoint rev_bin_helper (b: bin) (acc: bin) :=
  match b with
  | Z => acc
  | A b => rev_bin_helper b (A acc)
  | B b => rev_bin_helper b (B acc)
  end.

Fixpoint rev_bin (b: bin) :=
  rev_bin_helper b Z.

Compute rev_bin (A (B (A (A Z)))).


Fixpoint rev_norm (b: bin) :=
  match b with
    | Z => Z
    | A b0 => rev_norm b0
    | B b0 => B b0
  end.


Fixpoint norm_old (b: bin) := rev_bin (rev_norm (rev_bin b)).
*)

Fixpoint norm (b: bin) :=
  match b with
  | Z => Z
  | A b1 => match norm b1 with
           | Z => Z
           | A b0 => A (norm b1)
           | B b0 => A (norm b1)
           end
  | B b1 => B (norm b1)
  end.

query: (ObjList())
parsed: None
step 418
input: 

Theorem norm_B_comm: forall (b: bin), norm (B b) = B (norm b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 139))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Rel 1)))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 139]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Rel, 1]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 419
input:   intros b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 420
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 146))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 146]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 421
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 422
input: Qed.

query: (ObjList())
parsed: None
step 423
input: 

Theorem incr_norm_A_b: forall (b: bin), incr (norm (A b)) = B (norm b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 142))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Rel 1)))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 142]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 424
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 143))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 143]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 425
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 426
input: destruct (norm b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 162))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 165))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 162]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 427
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 169))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 165))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 169]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 428
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 165))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 429
input: }
  { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 173))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 173]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 430
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 431
input: }
  { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 177))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 177]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 432
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 433
input: }
Qed.

query: (ObjList())
parsed: None
step 434
input: 
Theorem norm_A_incr_B_b: forall (b: bin), norm (A (incr b)) = A (norm (incr b)).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 145))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 145]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 435
input:   intros b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 146))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 146]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 436
input:   simpl norm at 1.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 152))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 152]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 437
input:   induction b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 157))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))))(hyp()))((info((evar(Ser_Evar 161))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 163))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 157]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 161]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 163]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 438
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 188))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 161))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 163))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 188]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 161]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 163]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 439
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 161))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 163))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 161]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 163]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 440
input: }
  { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 206))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 163))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 206]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 163]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 441
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 163))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 163]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 442
input: }
  { simpl incr at 1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 210))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 210]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 443
input: simpl norm at 1. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 216))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 216]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 444
input: rewrite -> IHb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 217))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 217]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 445
input:     reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 446
input:   }
Qed.

query: (ObjList())
parsed: None
step 447
input: 
Theorem incr_norm_comm: forall (b: bin), incr (norm b) = norm (incr b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 148))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 148]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 448
input:   intros b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 149))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 149]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 449
input: induction b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 154))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(hyp()))((info((evar(Ser_Evar 158))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 154]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 158]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 450
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 176))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 158))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 176]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 158]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 451
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 158))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 158]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 452
input: }
  { assert (H: incr (A b) = B b). 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 182))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 182]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 453
input: {simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 185))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 182))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 185]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 182]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 454
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 182))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 182]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 455
input: } rewrite -> H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 187))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 187]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 456
input:     rewrite -> norm_B_comm.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 188))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 188]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 457
input:     rewrite -> incr_norm_A_b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 189))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 189]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 458
input:     reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 459
input: }
  { assert (H: incr (B b) = A (incr b)). 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 193))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 195))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 193]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 195]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 460
input: {simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 198))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 195))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 198]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 195]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 461
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 195))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 195]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 462
input: } rewrite -> H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 200))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 200]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 463
input:     rewrite -> norm_B_comm.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 464
input:     assert (H1: incr (B (norm b)) = A (incr (norm b))). 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 204))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 206))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 204]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 206]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 465
input: {simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 209))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 206))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 209]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 206]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 466
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 206))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 206]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 467
input: } rewrite -> H1.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 211))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 211]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 468
input:     rewrite -> IHb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 212))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Var(Id b)))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 212]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Var, [Id, b]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 469
input: destruct b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 232))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))))))))((info((evar(Ser_Evar 236))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 240))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 232]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]])]), RGoal(info=[[evar, [Ser_Evar, 236]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 240]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 470
input:     { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 269))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))))))))))(stack((()(((info((evar(Ser_Evar 236))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 240))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 269]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 236]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 240]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 471
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 236))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 240))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 236]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 240]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 472
input: }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 291))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 240))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 291]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 240]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 473
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 240))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 240]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 474
input: }
    { rewrite -> norm_A_incr_B_b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 293))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(hyp((((Id H1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))))(((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 293]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]), Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 475
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 476
input: }
  }
Qed.

query: (ObjList())
parsed: None
step 477
input: 


Theorem norm_nat_to_bin: forall (n: nat), norm (nat_to_bin n) = nat_to_bin n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 151))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 151]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 478
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 152))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 152]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 479
input: induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 156))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 159))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 156]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 159]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 480
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 167))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 159))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 167]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 159]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 481
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 159))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 159]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 482
input: }
  { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 173))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 173]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 483
input: rewrite <- incr_norm_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 174))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 174]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 484
input: rewrite -> IHn. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 175))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 175]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 485
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 486
input: }
Qed.

query: (ObjList())
parsed: None
step 487
input: 

Theorem A_incr_b: forall (b: bin), A (incr b) = incr (incr (A b)).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 154))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Rel 1)))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 154]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Rel, 1]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 488
input:   simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 158))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 158]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 489
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 490
input: Qed.

query: (ObjList())
parsed: None
step 491
input: 



Theorem norm_A_natbin_n: forall (n: nat), norm (A (nat_to_bin n)) = nat_to_bin (n + n).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 157))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(Rel 1)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 157]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [Rel, 1]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 492
input:   intros n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 158))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 158]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 493
input:   induction n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 162))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))(hyp()))((info((evar(Ser_Evar 165))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 162]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 494
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 178))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 165))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 178]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 495
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 165))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 496
input: }
  { simpl plus. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 182))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 182]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 497
input: rewrite -> plus_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 183))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(Var(Id n)))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 183]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [Var, [Id, n]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 498
input: simpl plus.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 186))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 499
input:     simpl nat_to_bin at 2. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 191))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 500
input: simpl nat_to_bin at 1.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 194))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 501
input:     rewrite <- IHn. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 195))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 195]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 502
input: rewrite -> incr_norm_comm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 196))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 196]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 503
input: rewrite -> incr_norm_comm.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 197))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 197]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 504
input:     rewrite <- A_incr_b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 198))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n)))))))))))))(hyp((((Id IHn))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((Var(Id n))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n)))))))))(((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 198]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHn]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[Var, [Id, n]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]]]]]]), Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 505
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 506
input:   }
Qed.

query: (ObjList())
parsed: None
step 507
input: 

Lemma norm_caseA: forall (b: bin), norm (norm b) = norm b -> norm (norm (A b)) = norm (A b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 162))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Rel 2)))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Rel 2))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 162]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 508
input:   intros b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 163))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 163]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 509
input: intros IHb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 164))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 164]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 510
input:   simpl norm at 3. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 170))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 170]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 511
input: rewrite <- IHb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 171))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 171]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 512
input:   simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 181))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 181]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 513
input:   destruct (norm b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 197))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 199))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 197]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 199]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 514
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 211))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 199))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 211]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 199]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 515
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 199))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 199]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 516
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 250))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))))))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 250]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 517
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 518
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 273))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b0)))))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 273]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b0]]]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 519
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 520
input: Qed.

query: (ObjList())
parsed: None
step 521
input: 

  
Theorem norm_norm: forall (b: bin), norm (norm b) = norm b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 165))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 522
input:   induction b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 171))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 175))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 177))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 171]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 175]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 177]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 523
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 191))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 175))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 177))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 175]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 177]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 524
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 175))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 177))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 175]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 177]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 525
input: }
  { revert IHb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 194))(name())))(ty(Prod((binder_name(Name(Id IHb)))(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 177))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, IHb]]], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 177]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 526
input: revert b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 196))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Prod((binder_name(Name(Id IHb)))(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Rel 2)))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Rel 2))))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 177))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 196]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, IHb]]], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 177]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 527
input: exact norm_caseA. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 177))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 177]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 528
input: }
  { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 210))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 210]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 529
input: rewrite IHb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 211))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 211]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 530
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 531
input: }
Qed.

query: (ObjList())
parsed: None
step 532
input: 

    
Theorem bin_nat_bin: forall (b: bin), nat_to_bin (bin_to_nat b) = norm b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 168))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Rel 1)))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 168]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Rel, 1]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 533
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 169))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 169]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 534
input: induction b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 174))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 178))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 174]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 178]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 535
input:   { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 189))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 178))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 189]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 178]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 536
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 178))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 178]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 537
input: }
  { simpl bin_to_nat at 1.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 197))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 197]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 538
input:     assert (H: (bin_to_nat b + 0) = bin_to_nat b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 200))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 202))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 200]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 202]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 539
input:     { rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 203))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 202))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 203]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 202]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 540
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 202))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 202]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 541
input: }
    rewrite -> H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 205))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 205]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 542
input: rewrite <- norm_A_natbin_n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 206))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 206]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 543
input:     rewrite -> IHb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 207))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 207]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 544
input:     simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 217))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 217]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 545
input: rewrite -> norm_norm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 218))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 218]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 546
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 547
input:   }
  { simpl bin_to_nat.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 228))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 228]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 548
input:     assert (HH: (bin_to_nat b  + 0) = bin_to_nat b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 231))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 233))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 231]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 233]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 549
input:     { rewrite <- plus_n_O. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 234))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(hyp((((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 233))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 234]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 233]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 550
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 233))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 233]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 551
input: }
    rewrite -> HH.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 236))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 236]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 552
input:     simpl nat_to_bin. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 239))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 239]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 553
input: rewrite <- norm_A_natbin_n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 240))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 240]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 554
input: simpl incr. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 250))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 250]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 555
input: simpl norm at 4.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 256))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 256]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 556
input:     rewrite -> IHb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 257))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 257]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 557
input: rewrite -> norm_norm. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 258))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 258]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 558
input: simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 260))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0))(ci_npar 0)(ci_cstr_ndecls(0 1 1))(ci_cstr_nargs(0 1 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(Lambda((binder_name(Name(Id b0)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id norm))(Instance())))((Var(Id b)))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 260]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1, 1]], [ci_cstr_nargs, [0, 1, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]], [Lambda, [[binder_name, [Name, [Id, b0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, norm]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 559
input:     destruct (norm b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 280))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 284))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 288))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 280]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 284]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 288]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 560
input:     { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 291))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 284))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 288))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 291]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 284]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 288]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 561
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 284))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))((info((evar(Ser_Evar 288))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 284]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 288]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 562
input: }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 295))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 288))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 295]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 288]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 563
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 288))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id incr))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 288]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, incr]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 564
input: }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 299))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))))(hyp((((Id HH))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b)))))))(((Id IHb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Induction)(Id LF))))(Id nat_to_bin))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id bin_to_nat))(Instance())))((Var(Id b))))))(App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)3)(Instance())))((Var(Id b0)))))))(((Id b)(Id b0))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bin))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 299]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]]], hyp=[Hyp(ids=[[Id, HH]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]]), Hyp(ids=[[Id, IHb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Induction], [Id, LF]]]], [Id, nat_to_bin]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin_to_nat]], [Instance, []]]], [[Var, [Id, b]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], 3], [Instance, []]]], [[Var, [Id, b0]]]]]]), Hyp(ids=[[Id, b], [Id, b0]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bin]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 565
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 566
input: }
  }
Qed.

query: (ObjList())
parsed: None
step 567
input: 


(* Do not modify the following line: *)
Definition manual_grade_for_binary_inverse_b : option (nat*string) := None.

query: (ObjList())
parsed: None
step 568
input: 
(** (c) Define a normalization function -- i.e., a function
        [normalize] going directly from [bin] to [bin] (i.e., _not_ by
        converting to [nat] and back) such that, for any binary number
        [b], converting [b] to a natural and then back to binary yields
        [(normalize b)].  Prove it.  (Warning: This part is a bit
        tricky -- you may end up defining several auxiliary lemmas.
        One good way to find out what you need is to start by trying
        to prove the main statement, see where you get stuck, and see
        if you can find a lemma -- perhaps requiring its own inductive
        proof -- that will allow the main proof to make progress.) Don't
        define thi using nat_to_bin and bin_to_nat! *)

(* FILL IN HERE *)

(* Do not modify the following line: *)
Definition manual_grade_for_binary_inverse_c : option (nat*string) := None.

query: (ObjList())
parsed: None
