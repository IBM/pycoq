step 0
input: Inductive bool: Type :=
| true
| false.

query: (ObjList())
parsed: None
step 1
input: 

Definition negb (x: bool): bool :=
  match x with
  | true => false
  | false => true
  end.

query: (ObjList())
parsed: None
step 2
input: 

Theorem double: forall x: bool, negb (negb x) = x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 3))(name())))(ty(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 3]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 3
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 3))(name())))(ty(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 3]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 4
input:   destruct x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 8))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 9))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 8]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 9]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 5
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 11))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 9))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 11]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 9]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 6
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 9))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 9]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 7
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 14))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 8
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 9
input: Qed.

query: (ObjList())
parsed: None
step 10
input: 
Inductive color: Type :=
| Red
| Green
| Blue.

query: (ObjList())
parsed: None
step 11
input: 
Definition shift (x: color): color :=
  match x with
  | Red => Green
  | Green => Blue
  | Blue => Red
  end.

query: (ObjList())
parsed: None
step 12
input: 
Theorem shift3: forall x: color, shift (shift (shift x)) = x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 6))(name())))(ty(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Rel 1)))))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 6]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Rel, 1]]]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 13
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 6))(name())))(ty(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Rel 1)))))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 6]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Rel, 1]]]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 14
input:   destruct x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 12))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 13))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 14))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 12]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 13]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 15
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 16))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 13))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 14))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 16]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 13]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 16
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 13))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 14))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 13]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 17
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 19))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 14))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 19]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 18
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 14))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 19
input:   - simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 22))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 22]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 20
input: reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 21
input: Qed.

query: (ObjList())
parsed: None
step 22
input: 
Theorem shift4: forall (x: color) (b: bool), shift (shift (shift x)) = x /\ negb (negb b) = b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 11))(name())))(ty(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Rel 2)))))))(Rel 2)))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 11]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Rel, 2]]]]]]], [Rel, 2]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 23
input:   destruct b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 17))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 17]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 24
input:   { destruct x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 23))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 23]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 25
input:     { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 26
input: split.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 29))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 30))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 29]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 30]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 27
input:       - set (my_id := Red).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 32))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Var(Id my_id))(Var(Id my_id)))))(hyp((((Id my_id))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance()))))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 30))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 32]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Var, [Id, my_id]], [Var, [Id, my_id]]]], hyp=[Hyp(ids=[[Id, my_id]], define=[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]], typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 30]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 28
input:         reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 30))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 30]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 29
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 30
input:     }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 36))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 36]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 31
input: split.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 38))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 38]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 32
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(()(((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 33
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 34
input:     }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 43))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))))(stack((()())(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 43]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 35
input: split.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 45))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))((info((evar(Ser_Evar 46))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack((()())(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 45]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 46]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 36
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 46))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(()())(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 46]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])]), ([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 37
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()())(()(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Var(Id x))))))))(Var(Id x))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Var, [Id, x]]]]]]]], [Var, [Id, x]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 38
input:     }
  }
  { destruct x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 53))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 53]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 39
input:     { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 57))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 40
input: split.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 59))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 60))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 59]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 60]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 41
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 60))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(()(((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 60]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 42
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 43
input:     }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 64))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 64]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 44
input: split.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 66))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 67))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 66]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 67]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 45
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 67))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(()(((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 67]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])]), ([], [RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 46
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 55))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id shift))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 55]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, shift]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 47
input:     }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 71))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id and))0)(Instance())))((App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 71]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, and]], 0], [Instance, []]]], [[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 48
input: split.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 73))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id color))0)3)(Instance()))))))(hyp()))((info((evar(Ser_Evar 74))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 73]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 74]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 49
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 74))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(()())(()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 74]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])]), ([], []), ([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 50
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 51
input:     }
  }
Qed.

query: (ObjList())
parsed: None
step 52
input: 

Theorem shift5: forall (b: bool), negb (negb (negb b)) = negb b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 14))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 53
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 14))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 54
input:   assert (H: forall x, negb (negb x) = x).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 18))(name())))(ty(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1)))))(hyp()))((info((evar(Ser_Evar 20))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp((((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 55
input:   intros x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 21))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id x))))))(Var(Id x)))))(hyp((((Id x))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 20))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp((((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 21]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, x]]]]]], [Var, [Id, x]]]], hyp=[Hyp(ids=[[Id, x]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 56
input:   destruct x.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 26))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 20))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp((((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 26]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 57
input:   simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 28))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 26))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 20))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp((((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 28]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 26]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 58
input:   reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 26))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 20))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp((((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 26]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 59
input:   simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 31))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 20))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp((((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 31]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 60
input:   reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 20))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp((((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 61
input:   intros b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 33))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance()))))(((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 33]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]), Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 62
input:   rewrite -> H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 34))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id b))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance()))))(((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 34]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]), Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 63
input:   reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 64
input: Qed.

query: (ObjList())
parsed: None
step 65
input: 
Theorem shift6: forall (b: bool), negb (negb (negb b)) = negb b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 17))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 17]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 66
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 17))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 17]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 67
input:   intros b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id b))))))))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 68
input:   set (id1 := negb b).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 20))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id id1))))))(Var(Id id1)))))(hyp((((Id id1))((App(Const((Constant(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id negb))(Instance())))((Var(Id b)))))(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance()))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id TwoGoals)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, id1]]]]]], [Var, [Id, id1]]]], hyp=[Hyp(ids=[[Id, id1]], define=[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]], typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, TwoGoals], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 69
input:   apply double.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 70
input: Qed.

query: (ObjList())
parsed: None
