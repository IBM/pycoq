step 0
input: Inductive day: Type :=
| monday
| tuesday
| wednesday
| thursday
| friday
| saturday
| sunday.

query: (ObjList())
parsed: None
step 1
input: 

Definition next_weekday (d: day): day :=
  match d with
  | monday => tuesday
  | tuesday => wednesday
  | wednesday => thursday
  | thursday => friday                   
  | friday => monday
  | saturday => monday
  | sunday => monday
  end.

query: (ObjList())
parsed: None
step 2
input: 
Compute (next_weekday friday).

query: (ObjList())
parsed: None
step 3
input: 

Example test_next_weekday:
  (next_weekday (next_weekday saturday)) = tuesday.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 3))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id day))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id next_weekday))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id next_weekday))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id day))0)6)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id day))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 3]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, day]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, next_weekday]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, next_weekday]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, day]], 0], 6], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, day]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 4
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 5))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id day))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id day))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id day))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 5]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, day]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, day]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, day]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 5
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 6
input: Qed.

query: (ObjList())
parsed: None
step 7
input: 

Inductive bool: Type :=
| true
| false.

query: (ObjList())
parsed: None
step 8
input: 

Definition negb (x: bool): bool :=
  match x with
  | true => false
  | false => true
  end.

query: (ObjList())
parsed: None
step 9
input: 
Definition andb (x: bool) (y: bool): bool :=
  match x, y with
  | true, true => true
  | true, false => false
  | false, true => false
  | false, false => false
  end.

query: (ObjList())
parsed: None
step 10
input: 
Definition orb (x: bool) (y: bool) : bool :=
  match x, y with
  | true, true => true
  | true, false => true
  | false, true => true
  | false, false => false
  end.

query: (ObjList())
parsed: None
step 11
input: 
Example test_orb1: (orb true false) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 6))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 6]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 12
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 8))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 8]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 13
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 14
input: Qed.

query: (ObjList())
parsed: None
step 15
input: 
Example test_orb2: (orb false false) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 9))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 9]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 16
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 11))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 11]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 17
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 18
input: Qed.

query: (ObjList())
parsed: None
step 19
input: 
Example test_orb3: (orb false true) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 12))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 12]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 20
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 14))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 14]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 21
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 22
input: Qed.

query: (ObjList())
parsed: None
step 23
input: 
Example test_orb4: (orb true true) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 15))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 15]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 24
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 17))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 17]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 25
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 26
input: Qed.

query: (ObjList())
parsed: None
step 27
input: 
Notation "x || y" := (orb x y).

query: (ObjList())
parsed: None
step 28
input: Notation "x && y" := (andb x y).

query: (ObjList())
parsed: None
step 29
input: 
Example test_orb5: (false || false || true) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 18))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 18]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 30
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 20))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 20]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 31
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 32
input: Qed.

query: (ObjList())
parsed: None
step 33
input: 
Definition nandb (x: bool) (y: bool) :=
  negb (andb x y).

query: (ObjList())
parsed: None
step 34
input: 

Example test_nandb1: (nandb true false) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 21))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id nandb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 21]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, nandb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 35
input: unfold nandb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 23))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 23]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 36
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 25))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 25]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 37
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 38
input: Qed.

query: (ObjList())
parsed: None
step 39
input: 

Example test_nandb2: (nandb false false) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 24))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id nandb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 24]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, nandb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 40
input: unfold nandb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 26))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 26]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 41
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 28))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 28]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 42
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 43
input: Qed.

query: (ObjList())
parsed: None
step 44
input: 
Example test_nandb3: (nandb false true) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 27))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id nandb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 27]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, nandb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 45
input: unfold nandb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 29))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 29]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 46
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 31))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 31]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 47
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 48
input: Qed.

query: (ObjList())
parsed: None
step 49
input: 
Example test_nandb4: (nandb true true) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 30))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id nandb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 30]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, nandb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 50
input: unfold nandb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 32))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 32]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 51
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 34))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 34]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 52
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 53
input: Qed.

query: (ObjList())
parsed: None
step 54
input: 
Definition andb3 (b1: bool) (b2: bool) (b3: bool): bool :=
  b1 && b2 && b3.

query: (ObjList())
parsed: None
step 55
input: 
Example test_andb31: (andb3 true true false) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 33))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb3))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 33]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb3]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 56
input: unfold andb3. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 35))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 35]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 57
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 37))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 37]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 58
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 59
input: Qed.

query: (ObjList())
parsed: None
step 60
input: 
Example test_andb32: (andb3 false true true) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 36))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb3))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 36]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb3]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 61
input: unfold andb3. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 38))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 38]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 62
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 40))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 40]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 63
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 64
input: Qed.

query: (ObjList())
parsed: None
step 65
input: 
Example test_andb33: (andb3 true false true) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 39))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb3))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 39]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb3]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 66
input: unfold andb3. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 41))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 41]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 67
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 43))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 43]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 68
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 69
input: Qed.

query: (ObjList())
parsed: None
step 70
input: 
Example test_andb34: (andb3 true false true) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 42))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb3))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 42]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb3]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 71
input: unfold andb3. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 44))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 44]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 72
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 46))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 46]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 73
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 74
input: Qed.

query: (ObjList())
parsed: None
step 75
input: 

Check true.

query: (ObjList())
parsed: None
step 76
input: 
Check (negb false).

query: (ObjList())
parsed: None
step 77
input: 
Check negb.

query: (ObjList())
parsed: None
step 78
input: 
Inductive rgb: Type :=
| red
| green
| blue.

query: (ObjList())
parsed: None
step 79
input: 

Inductive color: Type :=
| black
| white
| primary: rgb -> color.

query: (ObjList())
parsed: None
step 80
input: 

Check black.

query: (ObjList())
parsed: None
step 81
input: Print  color.

query: (ObjList())
parsed: None
step 82
input: 

Definition monochrome (c: color) : bool :=
  match c with
  | black => true
  | white => true
  | primary _ => false
  end.

query: (ObjList())
parsed: None
step 83
input: 

Example check_monochrome: monochrome (primary red) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 45))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id monochrome))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id color))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id rgb))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 45]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, monochrome]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, rgb]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 84
input: unfold monochrome. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 47))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 47]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 85
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 86
input: Qed.

query: (ObjList())
parsed: None
step 87
input: 

Definition isred (c: color) : bool :=
  match c with
  | primary red => true
  | _ => false
  end.

query: (ObjList())
parsed: None
step 88
input: 

Example check_isred: isred (black) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 48))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id isred))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id color))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 48]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, isred]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, color]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 89
input: unfold isred. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 50))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 50]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 90
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 91
input: Qed.

query: (ObjList())
parsed: None
step 92
input: 
Example check_isred1: isred (primary green) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 51))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id isred))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id color))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id rgb))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 51]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, isred]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, rgb]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 93
input: unfold isred. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 53))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 53]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 94
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 95
input: Qed.

query: (ObjList())
parsed: None
step 96
input: 
Example check_isred2: isred (primary red) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 54))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id isred))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id color))0)3)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id rgb))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 54]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, isred]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, color]], 0], 3], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, rgb]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 97
input: unfold isred. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 56))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 56]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 98
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 99
input: Qed.

query: (ObjList())
parsed: None
step 100
input: 
Inductive bit: Type :=
| B0
| B1.

query: (ObjList())
parsed: None
step 101
input: 
Inductive nybble: Type :=
| bits (b0 b1 b2 b3 : bit).

query: (ObjList())
parsed: None
step 102
input: 
Check (bits B1 B0 B1 B0).

query: (ObjList())
parsed: None
step 103
input: 
Check  (bits B1 B0 B1 B0).

query: (ObjList())
parsed: None
step 104
input: 
Definition all_zero (nb: nybble): bool :=
  match nb with
  | (bits B0 B0 B0 B0) => true
  | (bits _ _ _ _) => false
  end.

query: (ObjList())
parsed: None
step 105
input: 

Example check_all_zero: all_zero (bits B0 B1 B0 B1) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 57))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id all_zero))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id nybble))0)1)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 57]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, all_zero]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, nybble]], 0], 1], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 106
input: unfold all_zero. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 59))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 59]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 107
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 108
input: Qed.

query: (ObjList())
parsed: None
step 109
input: 
Example check_all_zero1: all_zero (bits B0 B0 B0 B0) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 60))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id all_zero))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id nybble))0)1)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bit))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 60]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, all_zero]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, nybble]], 0], 1], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bit]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 110
input: unfold all_zero. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 62))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 62]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 111
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 112
input: Qed.

query: (ObjList())
parsed: None
step 113
input: 

Compute (all_zero (bits B1 B0 B1 B0)).

query: (ObjList())
parsed: None
step 114
input: 
Compute (all_zero (bits B0 B0 B0 B0)).

query: (ObjList())
parsed: None
step 115
input: 

Module Test.

query: (ObjList())
parsed: None
step 116
input: 
  Inductive bool: Type :=
  | FALSE
  | TRUE.

query: (ObjList())
parsed: None
step 117
input:   

End Test.

query: (ObjList())
parsed: None
step 118
input: 
Check Test.FALSE.

query: (ObjList())
parsed: None
step 119
input: 
(* everything defined inside the module, outside gets module name prepended to variable name *)

Check (S (S (S O))).

query: (ObjList())
parsed: None
step 120
input: 

Module NatPlayground.

query: (ObjList())
parsed: None
step 121
input: 
  Inductive nat: Type :=
  | O: nat
  | S: nat -> nat.

query: (ObjList())
parsed: None
step 122
input: 
  Check S O.

query: (ObjList())
parsed: None
step 123
input:   Check S (S O).

query: (ObjList())
parsed: None
step 124
input: 
  Definition is_zero (x: nat): bool :=
    match x with
    | O => true
    | _ => false
    end.

query: (ObjList())
parsed: None
step 125
input: 
  Example check_zero0: is_zero O  = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 63))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id is_zero))(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 63]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, is_zero]], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 126
input:   unfold is_zero. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 65))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 127
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 128
input: Qed.

query: (ObjList())
parsed: None
step 129
input: 
  Example check_one1: is_zero (S O) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 66))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id is_zero))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 66]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, is_zero]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 130
input:   unfold is_zero. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 68))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 68]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 131
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 132
input: Qed.

query: (ObjList())
parsed: None
step 133
input: 
  Definition pred (x: nat): nat :=
    match x with
    | S y => y
    | O => O
    end.

query: (ObjList())
parsed: None
step 134
input: 
  Compute pred (S (S O)).

query: (ObjList())
parsed: None
step 135
input: 
  Example test_pred: is_zero (pred (S O)) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 69))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id is_zero))(Instance())))((App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id pred))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 69]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, is_zero]], [Instance, []]]], [[App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, pred]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 136
input:   unfold is_zero. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 71))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id pred))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 71]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, pred]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 137
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 73))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 73]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 138
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 139
input: Qed.

query: (ObjList())
parsed: None
step 140
input: 
  Example test_pred2: is_zero (pred (pred (S (S O)))) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 72))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id is_zero))(Instance())))((App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id pred))(Instance())))((App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id pred))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 72]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, is_zero]], [Instance, []]]], [[App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, pred]], [Instance, []]]], [[App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, pred]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 141
input:   unfold is_zero. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 74))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id pred))(Instance())))((App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id pred))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 74]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, pred]], [Instance, []]]], [[App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, pred]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 142
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 76))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 76]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 143
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 144
input: Qed.

query: (ObjList())
parsed: None
step 145
input:   
  Check (S (S O)).

query: (ObjList())
parsed: None
step 146
input: 
  Fixpoint evenb (n: nat): bool :=
    match n with
    | O => true
    | S O => false
    | S (S n1) => evenb n1
    end.

query: (ObjList())
parsed: None
step 147
input: 
  Compute evenb (S (S (S O))).

query: (ObjList())
parsed: None
step 148
input: 
  Example check_evenb: evenb (S (S (S (S (S O))))) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 75))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id evenb))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 75]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, evenb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 149
input:   unfold evenb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 77))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 77]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 150
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 151
input: Qed.

query: (ObjList())
parsed: None
step 152
input: 
  Fixpoint add (n: nat) (m: nat): nat :=
    match n with
    | O => m
    | S n1 => add n1 (S m)
    end.

query: (ObjList())
parsed: None
step 153
input: 
  Compute add (S (S O)) (S (S (S O))).

query: (ObjList())
parsed: None
step 154
input: 
  Fixpoint mult (n: nat) (m: nat) :=
    match n with
    | O => O
    | S n1 => add m (mult n1 m)
    end.

query: (ObjList())
parsed: None
step 155
input: 
  Compute mult (S (S (S O))) (S (S (S O))).

query: (ObjList())
parsed: None
step 156
input: 
  Example check_evenb1: evenb (mult (S (S (S O))) (S (S (S O)))) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 81))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id evenb))(Instance())))((App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id mult))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 81]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, evenb]], [Instance, []]]], [[App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, mult]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 157
input:   unfold evenb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 83))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id evenb)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id n0)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n0)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Rel 4)((Rel 1))))))))))))))((App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id mult))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 83]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, evenb]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, n0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n0]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 4], [[Rel, 1]]]]]]]]]]]]]], [[App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, mult]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 158
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 101))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 101]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 159
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 160
input: Qed.

query: (ObjList())
parsed: None
step 161
input: 
  Fixpoint apply (n: nat) (f: nat -> nat) (v: nat) :=
    match n with
    | O => v
    | S n1 => f (apply n1 f v)
    end.

query: (ObjList())
parsed: None
step 162
input: 
  Notation "0" := O.

query: (ObjList())
parsed: None
step 163
input:   Notation "1" := (S O).

query: (ObjList())
parsed: None
step 164
input:   Notation "2" := (S (S O)).

query: (ObjList())
parsed: None
step 165
input:   Notation "3" := (S (S (S O))).

query: (ObjList())
parsed: None
step 166
input:   Notation "4" := (S (S (S (S O)))).

query: (ObjList())
parsed: None
step 167
input:   Notation "5" := (S (S (S (S (S O))))).

query: (ObjList())
parsed: None
step 168
input: 
  Example check_add: add 1 1  = S (S O).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 87))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance()))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 87]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 169
input:   unfold add. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance()))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 170
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 171
input: Qed.

query: (ObjList())
parsed: None
step 172
input: 

  Fixpoint sub (x: nat) (y: nat) :=
    match x, y with
    | n, O => n
    | O, m => O
    | S n, S m => sub n m
    end.

query: (ObjList())
parsed: None
step 173
input: 

  Compute sub (S (S (S (S O)))) (S (S O)).

query: (ObjList())
parsed: None
step 174
input: 
  Notation "x + y" := (add x y)
                        (at level 50, left associativity).

query: (ObjList())
parsed: None
step 175
input: 
  Notation "x * y" := (mult x y)
                        (at level 40, left associativity).

query: (ObjList())
parsed: None
step 176
input: 
  Check (0 + 1).

query: (ObjList())
parsed: None
step 177
input: 
  Theorem add0: forall n: nat, add 0 n = n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 93))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))(Rel 1)))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 178
input:     intro n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 94))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 94]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 179
input: unfold add. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 96))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Var(Id n))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 180
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 181
input: Qed.

query: (ObjList())
parsed: None
step 182
input: 
  Theorem andb_commutative: forall b c: bool, andb b c = andb c b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 96))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 183
input:     intros b c.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 98))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Var(Id b)))))))(hyp((((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 98]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 184
input:     - destruct c.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 102))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 102]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 185
input:       unfold andb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 105))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Var(Id b))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id y)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Var(Id b))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 105]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Var, [Id, b]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, y]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Var, [Id, b]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 186
input:       reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 187
input:       unfold andb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Var(Id b))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id y)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Var(Id b))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Var, [Id, b]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, y]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Var, [Id, b]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 188
input:       reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 189
input:   Qed.

query: (ObjList())
parsed: None
step 190
input: 
  
      



  Theorem add01: forall n: nat, add n 0 = n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 99))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Rel 1)(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 99]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Rel, 1], [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 191
input:     intro n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 100))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Var(Id n))(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 100]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 192
input: unfold add. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 102))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id add)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))(Rel 2)((Rel 1)(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Rel 4)((Rel 1)(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Rel 2))))))))))))))((Var(Id n))(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))(Var(Id n)))))(hyp((((Id n))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 102]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, add]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]], [Rel, 2], [[Rel, 1], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 4], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]]]]]]]]], [[Var, [Id, n]], [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 193
input: (* пока не знаю как доказать *)
    destruct n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 106))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id add)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))(Rel 2)((Rel 1)(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Rel 4)((Rel 1)(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Rel 2))))))))))))))((Var(Id n))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id n))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 106]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, add]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]], [Rel, 2], [[Rel, 1], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 4], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]]]]]]]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 194
input:     - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id add)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))(Rel 2)((Rel 1)(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Rel 4)((Rel 1)(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Rel 2))))))))))))))((Var(Id n))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id n))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, add]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]], [Rel, 2], [[Rel, 1], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 4], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]]]]]]]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 195
input:     - destruct n as [|nn]. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 113))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 115))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id add)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance()))))(Rel 2)((Rel 1)(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Rel 4)((Rel 1)(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Rel 2))))))))))))))((Var(Id nn))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)2)(Instance())))((Var(Id nn)))))))))(hyp((((Id nn))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 113]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 115]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, add]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]]], [Rel, 2], [[Rel, 1], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 4], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 2]]]]]]]]]]]]]], [[Var, [Id, nn]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, nn]]]]]]]], hyp=[Hyp(ids=[[Id, nn]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 196
input: Abort.  
query: (ObjList())
parsed: None
step 197
input: (* we need proof by induction, that is the  next chapter *)


  Theorem plus_id_example: forall c n m: nat, n = m -> c + n = c + m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 104))(name())))(ty(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Rel 2)(Rel 1)))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Rel 4)(Rel 3)))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Rel 4)(Rel 2))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 104]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Rel, 2], [Rel, 1]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Rel, 4], [Rel, 3]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Rel, 4], [Rel, 2]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 198
input:     intros c n m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 107))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Var(Id c))(Var(Id n))))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Var(Id c))(Var(Id m))))))))(hyp((((Id c)(Id n)(Id m))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, m]]]]]]], hyp=[Hyp(ids=[[Id, c], [Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 199
input:     intro h.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Var(Id c))(Var(Id n))))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Var(Id c))(Var(Id m)))))))(hyp((((Id h))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m)))))(((Id c)(Id n)(Id m))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, h]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]]), Hyp(ids=[[Id, c], [Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 200
input:     rewrite -> h.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 109))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Var(Id c))(Var(Id m))))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id add))(Instance())))((Var(Id c))(Var(Id m)))))))(hyp((((Id h))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m)))))(((Id c)(Id n)(Id m))()(Ind(((MutInd(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 109]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, add]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, h]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]]), Hyp(ids=[[Id, c], [Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 201
input:     reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 202
input:   Qed.

query: (ObjList())
parsed: None
step 203
input: 


  


(** With this definition, 0 is represented by [O], 1 by [S O],
    2 by [S (S O)], and so on. *)

(** The clauses of this definition can be read:
      - [O] is a natural number (note that this is the letter "[O],"
        not the numeral "[0]").
      - [S] can be put in front of a natural number to yield another
        one -- if [n] is a natural number, then [S n] is too. *)

(** Again, let's look at this in a little more detail.  The definition
    of [nat] says how expressions in the set [nat] can be built:

    - [O] and [S] are constructors;
    - the expression [O] belongs to the set [nat];
    - if [n] is an expression belonging to the set [nat], then [S n]
      is also an expression belonging to the set [nat]; and
    - expressions formed in these two ways are the only ones belonging
      to the set [nat]. *)

(** The same rules apply for our definitions of [day], [bool],
    [color], etc.

    The above conditions are the precise force of the [Inductive]
    declaration.  They imply that the expression [O], the expression
    [S O], the expression [S (S O)], the expression [S (S (S O))], and
    so on all belong to the set [nat], while other expressions built
    from data constructors, like [true], [andb true false], [S (S
    false)], and [O (O (O S))] do not.

    A critical point here is that what we've done so far is just to
    define a _representation_ of numbers: a way of writing them down.
    The names [O] and [S] are arbitrary, and at this point they have
    no special meaning -- they are just two different marks that we
    can use to write down numbers (together with a rule that says any
    [nat] will be written as some string of [S] marks followed by an
    [O]).  If we like, we can write essentially the same definition
    this way: *)

Inductive nat' : Type :=
  | stop
  | tick (foo : nat').

query: (ObjList())
parsed: None
step 204
input: 
(** The _interpretation_ of these marks comes from how we use them to
    compute. *)

(** We can do this by writing functions that pattern match on
    representations of natural numbers just as we did above with
    booleans and days -- for example, here is the predecessor
    function: *)

(* 
Definition pred (n : nat) : nat :=
  match n with
    | O => O
    | S n' => n'
  end.
 *)

(** The second branch can be read: "if [n] has the form [S n']
    for some [n'], then return [n']."  *)

End NatPlayground.

query: (ObjList())
parsed: None
step 205
input: 
(** Because natural numbers are such a pervasive form of data,
    Coq provides a tiny bit of built-in magic for parsing and printing
    them: ordinary decimal numerals can be used as an alternative to
    the "unary" notation defined by the constructors [S] and [O].  Coq
    prints numbers in decimal form by default: *)

Check (S (S (S (S O)))).

query: (ObjList())
parsed: None
step 206
input:   (* ===> 4 : nat *)

Definition minustwo (n : nat) : nat :=
  match n with
    | O => O
    | S O => O
    | S (S n') => n'
  end.

query: (ObjList())
parsed: None
step 207
input: 
Compute (minustwo 4).

query: (ObjList())
parsed: None
step 208
input:   (* ===> 2 : nat *)

(** The constructor [S] has the type [nat -> nat], just like
    [pred] and functions like [minustwo]: *)

Check S.

query: (ObjList())
parsed: None
step 209
input: Check pred.

query: (ObjList())
parsed: None
step 210
input: Check minustwo.

query: (ObjList())
parsed: None
step 211
input: 
(** These are all things that can be applied to a number to yield a
    number.  However, there is a fundamental difference between the
    first one and the other two: functions like [pred] and [minustwo]
    come with _computation rules_ -- e.g., the definition of [pred]
    says that [pred 2] can be simplified to [1] -- while the
    definition of [S] has no such behavior attached.  Although it is
    like a function in the sense that it can be applied to an
    argument, it does not _do_ anything at all!  It is just a way of
    writing down numbers.  (Think about standard decimal numerals: the
    numeral [1] is not a computation; it's a piece of data.  When we
    write [111] to mean the number one hundred and eleven, we are
    using [1], three times, to write down a concrete representation of
    a number.)

    For most function definitions over numbers, just pattern matching
    is not enough: we also need recursion.  For example, to check that
    a number [n] is even, we may need to recursively check whether
    [n-2] is even.  To write such functions, we use the keyword
    [Fixpoint]. *)

Fixpoint evenb (n:nat) : bool :=
  match n with
  | O        => true
  | S O      => false
  | S (S n') => evenb n'
  end.

query: (ObjList())
parsed: None
step 212
input: 
(** We can define [oddb] by a similar [Fixpoint] declaration, but here
    is a simpler definition: *)

Definition oddb (n:nat) : bool   :=   negb (evenb n).

query: (ObjList())
parsed: None
step 213
input: 
Example test_oddb1:    oddb 1 = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 63))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id oddb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 63]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, oddb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 214
input: Proof. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 63))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id oddb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 63]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, oddb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 215
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 65))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id oddb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 65]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, oddb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 216
input: reflexivity.  
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 217
input: Qed.

query: (ObjList())
parsed: None
step 218
input: Example test_oddb2:    oddb 4 = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 66))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id oddb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 66]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, oddb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 219
input: Proof. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 66))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id oddb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 66]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, oddb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 220
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 68))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id oddb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 68]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, oddb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 221
input: reflexivity.  
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 222
input: Qed.

query: (ObjList())
parsed: None
step 223
input: 
(** (You will notice if you step through these proofs that
    [simpl] actually has no effect on the goal -- all of the work is
    done by [reflexivity].  We'll see more about why that is shortly.)

    Naturally, we can also define multi-argument functions by
    recursion.  *)

Module NatPlayground2.

query: (ObjList())
parsed: None
step 224
input: 
Fixpoint plus (n : nat) (m : nat) : nat :=
  match n with
    | O => m
    | S n' => S (plus n' m)
  end.

query: (ObjList())
parsed: None
step 225
input: 
(** Adding three to two now gives us five, as we'd expect. *)

Compute (plus 3 2).

query: (ObjList())
parsed: None
step 226
input: 
(** The simplification that Coq performs to reach this conclusion can
    be visualized as follows: *)

(*  [plus (S (S (S O))) (S (S O))]
==> [S (plus (S (S O)) (S (S O)))]
      by the second clause of the [match]
==> [S (S (plus (S O) (S (S O))))]
      by the second clause of the [match]
==> [S (S (S (plus O (S (S O)))))]
      by the second clause of the [match]
==> [S (S (S (S (S O))))]
      by the first clause of the [match]
*)

(** As a notational convenience, if two or more arguments have
    the same type, they can be written together.  In the following
    definition, [(n m : nat)] means just the same as if we had written
    [(n : nat) (m : nat)]. *)

Fixpoint mult (n m : nat) : nat :=
  match n with
    | O => O
    | S n' => plus m (mult n' m)
  end.

query: (ObjList())
parsed: None
step 227
input: 
Example test_mult1: (mult 3 3) = 9.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 69))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground2))(Id mult))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 69]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground2]], [Id, mult]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 228
input: Proof. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 69))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPdot(MPfile(DirPath((Id Basics)(Id LF))))(Id NatPlayground2))(Id mult))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 69]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPdot, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, NatPlayground2]], [Id, mult]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 229
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 87))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 87]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 230
input: reflexivity.  
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 231
input: Qed.

query: (ObjList())
parsed: None
step 232
input: 
(** You can match two expressions at once by putting a comma
    between them: *)

Fixpoint minus (n m:nat) : nat :=
  match n, m with
  | O   , _    => O
  | S _ , O    => n
  | S n', S m' => minus n' m'
  end.

query: (ObjList())
parsed: None
step 233
input: 
End NatPlayground2.

query: (ObjList())
parsed: None
step 234
input: 
Fixpoint exp (base power : nat) : nat :=
  match power with
    | O => S O
    | S p => mult base (exp base p)
  end.

query: (ObjList())
parsed: None
step 235
input: 
Notation "x + y" := (plus x y)
                       (at level 50, left associativity)
                       : nat_scope.

query: (ObjList())
parsed: None
step 236
input: Notation "x - y" := (minus x y)
                       (at level 50, left associativity)
                       : nat_scope.

query: (ObjList())
parsed: None
step 237
input: Notation "x * y" := (mult x y)
                       (at level 40, left associativity)
                       : nat_scope.

query: (ObjList())
parsed: None
step 238
input: 
(** **** Exercise: 1 star, standard (factorial)  

    Recall the standard mathematical factorial function:

       factorial(0)  =  1
       factorial(n)  =  n * factorial(n-1)     (if n>0)

    Translate this into Coq. *)

Fixpoint factorial (n: nat): nat :=
  match n with
  | O => 1
  | S n => mult (plus n 1) (factorial n)
  end.

query: (ObjList())
parsed: None
step 239
input: 
Example test_factorial1: (factorial 3) = 6.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 69))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id factorial))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 69]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, factorial]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 240
input: unfold factorial. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 71))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 71]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 241
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 146))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 146]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 242
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 243
input: Qed.

query: (ObjList())
parsed: None
step 244
input: 
Example test_factorial2: (factorial 5) = (10 * 12).

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 72))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id factorial))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 72]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, factorial]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 245
input: unfold factorial.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 74))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 74]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 246
input:  unfold plus. 

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 76))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 76]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 247
input: unfold mult. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 78))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 78]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 248
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 1135))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 1135]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 249
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 250
input: Qed.

query: (ObjList())
parsed: None
step 251
input: 

Check ((0 + 1) + 1).

query: (ObjList())
parsed: None
step 252
input: 
(** (The [level], [associativity], and [nat_scope] annotations
    control how these notations are treated by Coq's parser.  The
    details are not important for our purposes, but interested readers
    can refer to the "More on Notation" section at the end of this
    chapter.)

    Note that these do not change the definitions we've already made:
    they are simply instructions to the Coq parser to accept [x + y]
    in place of [plus x y] and, conversely, to the Coq pretty-printer
    to display [plus x y] as [x + y]. *)

(** When we say that Coq comes with almost nothing built-in, we really
    mean it: even equality testing is a user-defined operation!

    Here is a function [eqb], which tests natural numbers for
    [eq]uality, yielding a [b]oolean.  Note the use of nested
    [match]es (we could also have used a simultaneous match, as we did
    in [minus].) *)

Fixpoint eqb (n m: nat): bool :=
  match n with
  | O => match m with
         | O => true
         | S m' => false
         end
  | S n1 => match m with
            | O => false
            | S m1 => eqb n1 m1
            end
  end.

query: (ObjList())
parsed: None
step 253
input: 
Fixpoint leb (n m: nat): bool :=
  match n with
  | O => true
  | S n1 =>
    match m with
    | O => false
    | S m1 => leb n1 m1
    end
  end.

query: (ObjList())
parsed: None
step 254
input: 
Example test_leqb1: (leb 2 2) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 75))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 75]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 255
input: unfold leb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 77))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 77]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 256
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 257
input: Qed.

query: (ObjList())
parsed: None
step 258
input: 
Example test_leb2: (leb 2 4) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 78))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 78]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 259
input: unfold leb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 80))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 80]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 260
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 261
input: Qed.

query: (ObjList())
parsed: None
step 262
input: 
Example test_leb3: (leb 4 2) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 81))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 81]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 263
input: unfold leb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 83))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 83]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 264
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 85))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 85]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 265
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 266
input: Qed.

query: (ObjList())
parsed: None
step 267
input: 

Notation "x =? y" := (eqb x y) (at level 70): nat_scope.

query: (ObjList())
parsed: None
step 268
input: 
Notation "x <=? y" := (leb x y) (at level 70): nat_scope.

query: (ObjList())
parsed: None
step 269
input: 
Example test_leb3': (4 <=? 2) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 84))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 84]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 270
input: unfold leb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 86))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 86]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 271
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 272
input: Qed.

query: (ObjList())
parsed: None
step 273
input: 

Definition ltb (n m: nat): bool :=
  andb (leb n m) (negb (eqb n m)).

query: (ObjList())
parsed: None
step 274
input: 

Notation "x <? y" := (ltb x y) (at level 70): nat_scope.

query: (ObjList())
parsed: None
step 275
input: 
Example test_ltb1: (ltb 2 2) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 87))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id ltb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 87]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, ltb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 276
input: unfold ltb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 89))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 89]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 277
input: unfold andb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 91))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id y)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id y)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 91]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, y]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, y]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 278
input: unfold negb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))((Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id y)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id y)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, y]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, y]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 279
input: unfold eqb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 95))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0))(ci_npar 0)(ci_cstr_ndecls(0 0))(ci_cstr_nargs(0 0))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()()))(style RegularStyle))))(Lambda((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 95]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 0]], [ci_cstr_nargs, [0, 0]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], []]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 280
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 100))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 100]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 281
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 282
input: Qed.

query: (ObjList())
parsed: None
step 283
input: 

Example test_ltb2: (ltb 2 4) = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 90))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id ltb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 90]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, ltb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 284
input: unfold ltb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 92))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 92]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 285
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 100))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 100]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 286
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 287
input: Qed.

query: (ObjList())
parsed: None
step 288
input: 
Example test_ltb3: (ltb 4 2) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 93))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id ltb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 93]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, ltb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 289
input: unfold ltb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 95))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id leb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 95]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, leb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 290
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 103))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 291
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 292
input: Qed.

query: (ObjList())
parsed: None
step 293
input: 


Theorem plus_0_n: forall n: nat, 0 + n = n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 96))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 96]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 294
input:   simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 99))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 99]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 295
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 296
input: Qed.

query: (ObjList())
parsed: None
step 297
input: 

Theorem plus_id_example: forall n m: nat, n = m -> n + n = m + m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 101))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 2)(Rel 1)))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 3)(Rel 3)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 2)(Rel 2)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 101]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 2], [Rel, 1]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 3], [Rel, 3]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 2], [Rel, 2]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 298
input:   intros n m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 103))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id m))))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 103]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 299
input:   intros H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 104))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id n))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id m)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m)))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 104]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, n]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 300
input:   rewrite H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 105))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id m)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m)))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 105]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 301
input:   reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 302
input: Qed.

query: (ObjList())
parsed: None
step 303
input: 

Theorem plus_1_l: forall n:nat, 1 + n = S n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 104))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Rel 1)))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 104]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 1]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 304
input:   intro n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 105))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 105]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 305
input:   unfold plus.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 107))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 306
input:   reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 307
input: Qed.

query: (ObjList())
parsed: None
step 308
input: 

Theorem mult_0_1: forall n:nat, 0 * n = 0.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 107))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 107]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 309
input:   intros n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 108))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 108]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 310
input:   unfold mult.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 110))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 110]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 311
input:   reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 312
input: Qed.

query: (ObjList())
parsed: None
step 313
input: 

Theorem plus_id_exercise: forall n m o: nat,
    n = m -> m = o -> n + m = m + o.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 114))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id o)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 3)(Rel 2)))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 3)(Rel 2)))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 5)(Rel 4)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 4)(Rel 3)))))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 114]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, o]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 3], [Rel, 2]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 3], [Rel, 2]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 5], [Rel, 4]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 4], [Rel, 3]]]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 314
input:   intros n m o.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m))))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(Var(Id o))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id o)))))))))(hyp((((Id n)(Id m)(Id o))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [Var, [Id, o]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, o]]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m], [Id, o]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 315
input:   intros h1 h2.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 119))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id o)))))))(hyp((((Id h2))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(Var(Id o)))))(((Id h1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m)))))(((Id n)(Id m)(Id o))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 119]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, o]]]]]], hyp=[Hyp(ids=[[Id, h2]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [Var, [Id, o]]]]), Hyp(ids=[[Id, h1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, o]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 316
input:   rewrite h1.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 120))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id m))(Var(Id o)))))))(hyp((((Id h2))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(Var(Id o)))))(((Id h1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m)))))(((Id n)(Id m)(Id o))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 120]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, o]]]]]], hyp=[Hyp(ids=[[Id, h2]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [Var, [Id, o]]]]), Hyp(ids=[[Id, h1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, o]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 317
input:   rewrite h2.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 121))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id o))(Var(Id o))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id o))(Var(Id o)))))))(hyp((((Id h2))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(Var(Id o)))))(((Id h1))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id n))(Var(Id m)))))(((Id n)(Id m)(Id o))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 121]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, o]], [Var, [Id, o]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, o]], [Var, [Id, o]]]]]], hyp=[Hyp(ids=[[Id, h2]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [Var, [Id, o]]]]), Hyp(ids=[[Id, h1]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, n]], [Var, [Id, m]]]]), Hyp(ids=[[Id, n], [Id, m], [Id, o]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 318
input:   reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 319
input: Qed.

query: (ObjList())
parsed: None
step 320
input: 

Theorem mult_0_plus: forall n m: nat,
    (0 + n) * m = n * m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 117))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 1))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 117]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 321
input:   intros n m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 119))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(Var(Id n))))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 119]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [Var, [Id, n]]]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 322
input:   unfold plus.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 121))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id n))(Var(Id m)))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 121]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, n]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 323
input:   reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 324
input: Qed.

query: (ObjList())
parsed: None
step 325
input: 
Theorem mult_S_1: forall n m: nat,
    m = S n -> m * (1 + n) = m * m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 122))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Rel 2)))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Rel 3)))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Rel 2)(Rel 2)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 122]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Rel, 2]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Rel, 3]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Rel, 2], [Rel, 2]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 326
input:   intros n m.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 124))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id m))))))))(hyp((((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 124]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]]]]], hyp=[Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 327
input:   intros H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 125))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id m)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 328
input:   unfold plus.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 127))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((Var(Id m))(Var(Id m)))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 127]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[Var, [Id, m]], [Var, [Id, m]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 329
input:   rewrite -> H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 128))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id mul))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Var(Id m))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n)))))))(((Id n)(Id m))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 128]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, mul]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Var, [Id, m]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]]]]), Hyp(ids=[[Id, n], [Id, m]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 330
input:   reflexivity.

query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 331
input: Qed.

query: (ObjList())
parsed: None
step 332
input: 

Theorem plus_1_neq_0_first_try: forall n: nat,
    (n + 1) =? 0 = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 125))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 125]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 333
input:   intros n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 126))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 126]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 334
input:   unfold eqb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 128))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id eqb)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Lambda((binder_name(Name(Id m1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Rel 5)((Rel 2)(Rel 1)))))))))))))))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 128]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, eqb]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 5], [[Rel, 2], [Rel, 1]]]]]]]]]]]]]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 335
input:   simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 130))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id eqb)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Lambda((binder_name(Name(Id m1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Rel 5)((Rel 2)(Rel 1)))))))))))))))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 130]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, eqb]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 5], [[Rel, 2], [Rel, 1]]]]]]]]]]]]]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 336
input:   destruct n as [| n1].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 134))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id eqb)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Lambda((binder_name(Name(Id m1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Rel 5)((Rel 2)(Rel 1)))))))))))))))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id eqb)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Lambda((binder_name(Name(Id m1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Rel 5)((Rel 2)(Rel 1)))))))))))))))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 134]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, eqb]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 5], [[Rel, 2], [Rel, 1]]]]]]]]]]]]]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, eqb]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 5], [[Rel, 2], [Rel, 1]]]]]]]]]]]]]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 337
input:   -  simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 139))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack((()(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id eqb)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Lambda((binder_name(Name(Id m1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Rel 5)((Rel 2)(Rel 1)))))))))))))))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 139]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, eqb]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 5], [[Rel, 2], [Rel, 1]]]]]]]]]]]]]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 338
input:      reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Fix(((0)0)((((binder_name(Name(Id eqb)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 1)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Lambda((binder_name(Name(Id n1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Rel 2)((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Lambda((binder_name(Name(Id m1)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Rel 5)((Rel 2)(Rel 1)))))))))))))))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n1))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, eqb]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 1], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Lambda, [[binder_name, [Name, [Id, n1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Rel, 2], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m1]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Rel, 5], [[Rel, 2], [Rel, 1]]]]]]]]]]]]]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n1]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 339
input:   -  simpl.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 143))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n1))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 143]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n1]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 340
input:     reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 341
input: Qed.

query: (ObjList())
parsed: None
step 342
input: 


(*     There are no hard and fast rules for how proofs should be
    formatted in Coq -- in particular, where lines should be broken
    and how sections of the proof should be indented to indicate their
    nested structure.  However, if the places where multiple subgoals
    are generated are marked with explicit bullets at the beginning of
    lines, then the proof will be readable almost no matter what
    choices are made about other aspects of layout.

    This is also a good place to mention one other piece of somewhat
    obvious advice about line lengths.  Beginning Coq users sometimes
    tend to the extremes, either writing each tactic on its own line
    or writing entire proofs on one line.  Good style lies somewhere
    in the middle.  One reasonable convention is to limit yourself to
    80-character lines.

    The [destruct] tactic can be used with any inductively defined
    datatype.  For example, we use it next to prove that boolean
    negation is involutive -- i.e., that negation is its own
    inverse. *)

Theorem negb_involutive: forall b: bool,
    negb (negb b) = b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 128))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Rel 1)))))(Rel 1)))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 128]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Rel, 1]]]]], [Rel, 1]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 343
input:   intros b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 129))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Var(Id b))))))(Var(Id b)))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 129]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Var, [Id, b]]]]]], [Var, [Id, b]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 344
input: destruct b. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 133))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 134))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 133]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 134]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 345
input: unfold negb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 136))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp()))((info((evar(Ser_Evar 134))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 136]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 134]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 346
input: reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 134))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id negb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 134]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, negb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 347
input:   unfold negb. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 139))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 139]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 348
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 349
input: Qed.

query: (ObjList())
parsed: None
step 350
input: 
Theorem andb_commutative: forall b c, andb b c = andb c b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 133))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 133]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 351
input:   intros b c. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 135))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Var(Id b)))))))(hyp((((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 135]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 352
input: destruct c. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 139))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 139]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 353
input: reflexivity. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id b)))))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 354
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 355
input: Qed.

query: (ObjList())
parsed: None
step 356
input: 

Theorem andb_commutative1: forall b c, andb b c = andb c b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 138))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 138]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 357
input:   intros b c. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 140))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Var(Id b)))))))(hyp((((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 140]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Var, [Id, b]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 358
input: destruct b eqn:Eb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 152))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 152]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 359
input:   { destruct c eqn:Ec.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 165))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 360
input:     { reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 361
input: } 
    { reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 362
input: } }
  { destruct c eqn:Ec.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 180))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 181))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 180]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 181]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 363
input:     { reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 181))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 181]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 364
input: }
    { reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 365
input: } }
  Qed.

query: (ObjList())
parsed: None
step 366
input: 

Theorem andb3_exchange:
  forall b c d, andb (andb b c) d = andb (andb b d) c.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 144))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id d)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 3)(Rel 2)))(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 3)(Rel 1)))(Rel 2)))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 144]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, d]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 3], [Rel, 2]]], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 3], [Rel, 1]]], [Rel, 2]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 367
input:   intros b c d. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 147))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Var(Id d))))(Var(Id c)))))))(hyp((((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 147]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 368
input: destruct b eqn:Eb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 159))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 159]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 369
input:   - destruct c eqn:Ec.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 172))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 173))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 173]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 370
input:     { destruct d eqn:Ed.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 185))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 186))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 173))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 185]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 173]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 371
input:       reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 186))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 173))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 173]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 372
input:       reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 173))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 173]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 373
input: }
    { destruct d eqn:Ed.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 200))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 200]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 374
input:       reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 201))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 201]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 375
input:       reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 160))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Var(Id c)))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Var, [Id, c]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 376
input: }
  - destruct c eqn:Ec.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 215))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 216))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 215]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 216]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 377
input:     { destruct d eqn:Ed.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 228))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 229))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 216))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 228]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 229]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 216]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 378
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 229))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 216))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 229]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 216]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 379
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 216))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Var(Id d))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id d))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 216]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Var, [Id, d]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, d]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 380
input:     }
    { destruct d eqn:Ed.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 243))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 244))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 243]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 244]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 381
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 244))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp((((Id Ed))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id d))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c)(Id d))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())(()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 244]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[Hyp(ids=[[Id, Ed]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, d]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c], [Id, d]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], []), ([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 382
input:       - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())(()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 383
input:     }
Qed.

query: (ObjList())
parsed: None
step 384
input: 


(** Since curly braces mark both the beginning and the end of a
    proof, they can be used for multiple subgoal levels, as this
    example shows. Furthermore, curly braces allow us to reuse the
    same bullet shapes at multiple levels in a proof: *)


(** Before closing the chapter, let's mention one final
    convenience.  As you may have noticed, many proofs perform case
    analysis on a variable right after introducing it:

       intros x y. destruct y as [|y] eqn:E.

    This pattern is so common that Coq provides a shorthand for it: we
    can perform case analysis on a variable when introducing it by
    using an intro pattern instead of a variable name. For instance,
    here is a shorter proof of the [plus_1_neq_0] theorem
    above.  (You'll also note one downside of this shorthand: we lose
    the equation recording the assumption we are making in each
    subgoal, which we previously got from the [eqn:E] annotation.) *)


Theorem plus_1_neq_00: forall n: nat,
    (n + 1) =? 0 = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 147))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 147]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 385
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 147))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 147]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 386
input:   intros [|n].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 151))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 151]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 387
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 153))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Var(Id n))))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 153]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Var, [Id, n]]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 388
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 389
input: Qed.

query: (ObjList())
parsed: None
step 390
input: 

(** If there are no arguments to name, we can just write [[]]. *)

Theorem andb_comm:
  forall b c, andb b c = andb c b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 152))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 152]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 391
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 152))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 1)(Rel 2))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 152]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 1], [Rel, 2]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 392
input:   intros [] [].

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 161))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 162))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 167))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 161]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 162]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 167]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 393
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 162))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 167))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 162]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 167]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 394
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))((info((evar(Ser_Evar 167))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 167]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 395
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 167))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))))(hyp()))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 167]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], hyp=[])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 396
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 397
input: Qed.

query: (ObjList())
parsed: None
step 398
input: 


Theorem andb_true_elim2: forall b c: bool,
    andb b c = true -> c = true.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 157))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Rel 2)(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 157]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Rel, 2], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 399
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 157))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Rel 2)(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 157]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Rel, 2], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 400
input:   intros b c.  
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 159))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Var(Id c))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 159]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, c]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 401
input: destruct c eqn:Ec.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 171))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 172))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 171]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 402
input:   - destruct b eqn: Eb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 184))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 185))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 172))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 184]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 185]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 403
input:     intro H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 186))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 185))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 172))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 185]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 404
input:     reflexivity.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 185))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 172))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 185]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 405
input:     intro H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 188))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 172))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 188]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 406
input:     reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 172))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 407
input:   -  destruct b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 193))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 194))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 193]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 408
input:      unfold andb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 196))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 194))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 196]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 409
input:      intro H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 197))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 194))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 197]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 410
input:      exact H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 194))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 411
input:      unfold andb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 199))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 199]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 412
input:      intro H.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 200))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Ec))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id c))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 200]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Ec]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, c]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 413
input:      exact H.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 414
input: Qed.

query: (ObjList())
parsed: None
step 415
input: 
Print andb_true_elim2.

query: (ObjList())
parsed: None
step 416
input: 
(** **** Exercise: 2 stars, standard (andb_true_elim2)  

    Prove the following claim, marking cases (and subcases) with
    bullets when you use [destruct]. *)

(** **** Exercise: 1 star, standard (zero_nbeq_plus_1)  *)

Theorem zero_nbeq_plus_1: forall n: nat,
    0 =? (n + 1) = false.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 160))(name())))(ty(Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Rel 1)(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 160]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Rel, 1], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 417
input:   intros n. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 161))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id eqb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 161]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, eqb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 418
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 164))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Const((Constant(MPfile(DirPath((Id Nat)(Id Init)(Id Coq))))(Id add))(Instance())))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 164]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Nat], [Id, Init], [Id, Coq]]]], [Id, add]], [Instance, []]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 419
input: unfold plus. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 166))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Fix(((0)0)((((binder_name(Name(Id add)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(Rel 2)((Rel 1)(Lambda((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Rel 4)((Rel 1)(Rel 2))))))))))))))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 166]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, add]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]], [Rel, 2], [[Rel, 1], [Lambda, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Rel, 4], [[Rel, 1], [Rel, 2]]]]]]]]]]]]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 420
input: simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 168))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(App(Fix(((0)0)((((binder_name(Name(Id add)))(binder_relevance Relevant)))((Prod((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Prod((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))))((Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Lambda((binder_name(Name(Id m)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Case((ci_ind((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0))(ci_npar 0)(ci_cstr_ndecls(0 1))(ci_cstr_nargs(0 1))(ci_relevance Relevant)(ci_pp_info((ind_tags())(cstr_tags(()(false)))(style RegularStyle))))(Lambda((binder_name(Name(Id n)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance()))))(Rel 2)((Rel 1)(Lambda((binder_name(Name(Id p)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((App(Rel 4)((Rel 1)(Rel 2))))))))))))))((Var(Id n))(App(Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)2)(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)1)(Instance())))))))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Lambda((binder_name(Name(Id"m'")))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 168]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [App, [Fix, [[[0], 0], [[[[binder_name, [Name, [Id, add]]], [binder_relevance, Relevant]]], [[Prod, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]]]], [[Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, m]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Case, [[ci_ind, [[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0]], [ci_npar, 0], [ci_cstr_ndecls, [0, 1]], [ci_cstr_nargs, [0, 1]], [ci_relevance, Relevant], [ci_pp_info, [[ind_tags, []], [cstr_tags, [[], [false]]], [style, RegularStyle]]]], [Lambda, [[binder_name, [Name, [Id, n]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]]], [Rel, 2], [[Rel, 1], [Lambda, [[binder_name, [Name, [Id, p]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[App, [Rel, 4], [[Rel, 1], [Rel, 2]]]]]]]]]]]]]], [[Var, [Id, n]], [App, [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 2], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], 1], [Instance, []]]]]]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Lambda, [[binder_name, [Name, [Id, "m'"]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 421
input: destruct n.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 172))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp()))((info((evar(Ser_Evar 174))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 172]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[]), RGoal(info=[[evar, [Ser_Evar, 174]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 422
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 174))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id n))()(Ind(((MutInd(MPfile(DirPath((Id Datatypes)(Id Init)(Id Coq))))(Id nat))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"Focus next goal with bullet ")(Pp_string -)(Pp_string .)))))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 174]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, n]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Datatypes], [Id, Init], [Id, Coq]]]], [Id, nat]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "Focus next goal with bullet "], [Pp_string, -], [Pp_string, .]]]])
step 423
input:   - reflexivity.

query: (ObjList((CoqGoal((goals())(stack((()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], [])], shelf=[], given_up=[], bullet=[])
step 424
input: Qed.

query: (ObjList())
parsed: None
step 425
input: 
  

(* ================================================================= *)
(** ** More on Notation (Optional) *)

(** (In general, sections marked Optional are not needed to follow the
    rest of the book, except possibly other Optional sections.  On a
    first reading, you might want to skim these sections so that you
    know what's there for future reference.)

    Recall the notation definitions for infix plus and times: *)



Notation "x + y" := (plus x y)
                      (at level 50, left associativity).

query: (ObjList())
parsed: None
step 426
input: 
Notation "x * y" := (mult x y)
                      (at level 40, left associativity).

query: (ObjList())
parsed: None
step 427
input: 
(* precedence level from 0 to 100, 0 is the highest precedence *)


(* ================================================================= *)
(** ** Fixpoints and Structural Recursion (Optional) *)

(** Here is a copy of the definition of addition: *)



Fixpoint plus' (n : nat) (m : nat) : nat :=
  match n with
  | O => m
  | S n' => S (plus' n' m)
  end.

query: (ObjList())
parsed: None
step 428
input: 
(** When Coq checks this definition, it notes that [plus'] is
    "decreasing on 1st argument."  What this means is that we are
    performing a _structural recursion_ over the argument [n] -- i.e.,
    that we make recursive calls only on strictly smaller values of
    [n].  This implies that all calls to [plus'] will eventually
    terminate.  Coq demands that some argument of _every_ [Fixpoint]
    definition is "decreasing."

    This requirement is a fundamental feature of Coq's design: In
    particular, it guarantees that every function that can be defined
    in Coq will terminate on all inputs.  However, because Coq's
    "decreasing analysis" is not very sophisticated, it is sometimes
    necessary to write functions in slightly unnatural ways. *)

(** **** Exercise: 2 stars, standard, optional (decreasing)  

    To get a concrete sense of this, find a way to write a sensible
    [Fixpoint] definition (of a simple function on numbers, say) that
    _does_ terminate on all inputs, but that Coq will reject because
    of this restriction.  (If you choose to turn in this optional
    exercise as part of a homework assignment, make sure you comment
    out your solution so that it doesn't cause Coq to reject the whole
    file!) *)

(* FILL IN HERE 

    [] *)

(* ################################################################# *)
(** * More Exercises *)

(** Each SF chapter comes with a tester file (e.g.  [BasicsTest.v]),
    containing scripts that check most of the exercises. You can run
    [make BasicsTest.vo] in a terminal and check its output to make
    sure you didn't miss anything. *)

(** **** Exercise: 1 star, standard (indentity_fn_applied_twice)  

    Use the tactics you have learned so far to prove the following
    theorem about boolean functions. *)


Theorem identity_fn_applied_twice:
  forall (f: bool -> bool),
    (forall (x: bool), f x = x) ->
    forall (b: bool), f (f b) = b.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 165))(name())))(ty(Prod((binder_name(Name(Id f)))(binder_relevance Relevant))(Prod((binder_name Anonymous)(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(Prod((binder_name Anonymous)(binder_relevance Relevant))(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Rel 2)((Rel 1)))(Rel 1))))(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Rel 3)((App(Rel 3)((Rel 1)))))(Rel 1)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 165]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, f]]], [binder_relevance, Relevant]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Rel, 2], [[Rel, 1]]], [Rel, 1]]]], [Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Rel, 3], [[App, [Rel, 3], [[Rel, 1]]]]], [Rel, 1]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 429
input:   intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 168))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Var(Id f))((App(Var(Id f))((Var(Id b))))))(Var(Id b)))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Var(Id f))((Rel 1)))(Rel 1)))))(((Id f))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 168]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Var, [Id, f]], [[App, [Var, [Id, f]], [[Var, [Id, b]]]]]], [Var, [Id, b]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]), Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Var, [Id, f]], [[Rel, 1]]], [Rel, 1]]]]), Hyp(ids=[[Id, f]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 430
input: rewrite H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 169))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Var(Id f))((Var(Id b))))(Var(Id b)))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Var(Id f))((Rel 1)))(Rel 1)))))(((Id f))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 169]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Var, [Id, f]], [[Var, [Id, b]]]], [Var, [Id, b]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]), Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Var, [Id, f]], [[Rel, 1]]], [Rel, 1]]]]), Hyp(ids=[[Id, f]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 431
input: rewrite H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 170))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Var(Id b)))))(hyp((((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))(((Id H))()(Prod((binder_name(Name(Id x)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Var(Id f))((Rel 1)))(Rel 1)))))(((Id f))()(Prod((binder_name Anonymous)(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance()))))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 170]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Var, [Id, b]]]], hyp=[Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]), Hyp(ids=[[Id, H]], define=None, typ=[Prod, [[binder_name, [Name, [Id, x]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Var, [Id, f]], [[Rel, 1]]], [Rel, 1]]]]), Hyp(ids=[[Id, f]], define=None, typ=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 432
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[], shelf=[], given_up=[], bullet=[])
step 433
input: Qed.

query: (ObjList())
parsed: None
step 434
input: 



(* FILL IN HERE *)
(* The [Import] statement on the next line tells Coq to use the
   standard library String module.  We'll use strings more in later
   chapters, but for the moment we just need syntax for literal
   strings for the grader comments. *)
From Coq Require Export String.

query: (ObjList())
parsed: None
step 435
input: 
(* Do not modify the following line: *)
Definition manual_grade_for_negation_fn_applied_twice : option (nat*string) := None.

query: (ObjList())
parsed: None
step 436
input: (** [] *)

(** **** Exercise: 3 stars, standard, optional (andb_eq_orb)  

    Prove the following theorem.  (Hint: This one can be a bit tricky,
    depending on how you approach it.  You will probably need both
    [destruct] and [rewrite], but destructing everything in sight is
    not the best way.) *)

Theorem andb_eq_orb:
  forall (b c : bool),    (andb b c = orb b c) -> b = c.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 171))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Rel 2)(Rel 1)))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Rel 3)(Rel 2)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 171]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Rel, 3], [Rel, 2]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 437
input: Proof.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 171))(name())))(ty(Prod((binder_name(Name(Id b)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name(Name(Id c)))(binder_relevance Relevant))(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Rel 2)(Rel 1)))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Rel 2)(Rel 1)))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Rel 3)(Rel 2)))))))(hyp()))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 171]], [name, []]], target=[Prod, [[binder_name, [Name, [Id, b]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, [Name, [Id, c]]], [binder_relevance, Relevant]], [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Rel, 2], [Rel, 1]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Rel, 3], [Rel, 2]]]]]], hyp=[])], stack=[], shelf=[], given_up=[], bullet=[])
step 438
input:   intros b c.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 173))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Var(Id b))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Var(Id b))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Var(Id c))))))(hyp((((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 173]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Var, [Id, b]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 439
input:   destruct b eqn:Eb.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 185))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack())(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 185]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[], shelf=[], given_up=[], bullet=[])
step 440
input:   - destruct c.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 190))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 191))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 190]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 441
input:     { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 193))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 191))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 193]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 442
input: intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 194))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 191))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 194]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 443
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 191))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 191]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 444
input: }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 197))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 197]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 445
input: intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 198))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 198]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 446
input: rewrite H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 199))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())(()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 199]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[])
step 447
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()(((info((evar(Ser_Evar 186))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Var(Id c))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b)(Id c))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [RGoal(info=[[evar, [Ser_Evar, 186]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Var, [Id, c]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b], [Id, c]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 448
input: }
  - destruct c.

query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 204))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))((info((evar(Ser_Evar 205))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())))(shelf())(given_up())(bullet((Pp_glue((Pp_string"The current bullet ")(Pp_string -)(Pp_string" is unfinished.")))))))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 204]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])]), RGoal(info=[[evar, [Ser_Evar, 205]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [])], shelf=[], given_up=[], bullet=[[Pp_glue, [[Pp_string, "The current bullet "], [Pp_string, -], [Pp_string, " is unfinished."]]]])
step 449
input:     { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 207))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 205))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 207]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 205]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 450
input: intros. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 208))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 205))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 208]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 205]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 451
input: rewrite H. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 209))(name())))(ty(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(hyp((((Id H))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)1)(Instance()))))))(((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()(((info((evar(Ser_Evar 205))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 209]], [name, []]], target=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]], hyp=[Hyp(ids=[[Id, H]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 1], [Instance, []]]]]]), Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 205]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[])
step 452
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()(((info((evar(Ser_Evar 205))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id andb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Const((Constant(MPfile(DirPath((Id Basics)(Id LF))))(Id orb))(Instance())))((Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(()())))(shelf())(given_up())(bullet((Pp_string"Try unfocusing with \"}\".")))))))
parsed: SerapiGoals(goals=[], stack=[([], [RGoal(info=[[evar, [Ser_Evar, 205]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, andb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Const, [[Constant, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, orb]], [Instance, []]]], [[Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])]), ([], [])], shelf=[], given_up=[], bullet=[[Pp_string, "Try unfocusing with \"}\"."]])
step 453
input: }
    { simpl. 
query: (ObjList((CoqGoal((goals(((info((evar(Ser_Evar 212))(name())))(ty(Prod((binder_name Anonymous)(binder_relevance Relevant))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance())))))))(hyp((((Id Eb))()(App(Ind(((MutInd(MPfile(DirPath((Id Logic)(Id Init)(Id Coq))))(Id eq))0)(Instance())))((Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))(Var(Id b))(Construct((((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)2)(Instance()))))))(((Id b))()(Ind(((MutInd(MPfile(DirPath((Id Basics)(Id LF))))(Id bool))0)(Instance())))))))))(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[RGoal(info=[[evar, [Ser_Evar, 212]], [name, []]], target=[Prod, [[binder_name, Anonymous], [binder_relevance, Relevant]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]], [App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]], hyp=[Hyp(ids=[[Id, Eb]], define=None, typ=[App, [Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Logic], [Id, Init], [Id, Coq]]]], [Id, eq]], 0], [Instance, []]]], [[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]], [Var, [Id, b]], [Construct, [[[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], 2], [Instance, []]]]]]), Hyp(ids=[[Id, b]], define=None, typ=[Ind, [[[MutInd, [MPfile, [DirPath, [[Id, Basics], [Id, LF]]]], [Id, bool]], 0], [Instance, []]]])])], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 454
input: reflexivity. 
query: (ObjList((CoqGoal((goals())(stack((()())(()())))(shelf())(given_up())(bullet())))))
parsed: SerapiGoals(goals=[], stack=[([], []), ([], [])], shelf=[], given_up=[], bullet=[])
step 455
input: }
Qed.

query: (ObjList())
parsed: None
step 456
input: 




    

(** [] *)

(** **** Exercise: 3 stars, standard (binary)  

    We can generalize our unary representation of natural numbers to
    the more efficient binary representation by treating a binary
    number as a sequence of constructors [A] and [B] (representing 0s
    and 1s), terminated by a [Z]. For comparison, in the unary
    representation, a number is a sequence of [S]s terminated by an
    [O].

    For example:

        decimal            binary                           unary
           0                   Z                              O
           1                 B Z                            S O
           2              A (B Z)                        S (S O)
           3              B (B Z)                     S (S (S O))
           4           A (A (B Z))                 S (S (S (S O)))
           5           B (A (B Z))              S (S (S (S (S O))))
           6           A (B (B Z))           S (S (S (S (S (S O)))))
           7           B (B (B Z))        S (S (S (S (S (S (S O))))))
           8        A (A (A (B Z)))    S (S (S (S (S (S (S (S O)))))))

    Note that the low-order bit is on the left and the high-order bit
    is on the right -- the opposite of the way binary numbers are
    usually written.  This choice makes them easier to manipulate. *)
Inductive bin: Type :=
| Z
| A (n: bin)
| B (n: bin).

query: (ObjList())
parsed: None
step 457
input: 

(** (a) Complete the definitions below of an increment function [incr]
        for binary numbers, and a function [bin_to_nat] to convert
        binary numbers to unary numbers. *)

(* Fixpoint incr (m:bin) : bin
  (* REPLACE THIS LINE WITH ":= _your_definition_ ." *). Admitted. *)


Fixpoint incr (m: bin): bin :=
  match m with
  | Z => B Z
  | A n => B n
  | B n => A (incr n)
  end.

query: (ObjList())
parsed: None
step 458
input: 
Fixpoint apply (n: nat) (f: bin -> bin) (v: bin) :=
  match n with
    | O => v
    | S n1 => f (apply n1 f v)
  end.

query: (ObjList())
parsed: None
step 459
input: 
Compute apply 12 incr Z.

query: (ObjList())
parsed: None
step 460
input: 

        
             

(**    (b) Write five unit tests [test_bin_incr1], [test_bin_incr2], etc.
        for your increment and binary-to-unary functions.  (A "unit
        test" in Coq is a specific [Example] that can be proved with
        just [reflexivity], as we've done for several of our
        definitions.)  Notice that incrementing a binary number and
        then converting it to unary should yield the same result as
        first converting it to unary and then incrementing. *)

(* FILL IN HERE *)


Fixpoint bin_to_nat (m: bin): nat :=
  match m with
  | Z => O
  | A n => mult 2 (bin_to_nat n)
  | B n => plus 1 (mult 2 (bin_to_nat n))
  end.

query: (ObjList())
parsed: None
step 461
input: 
Compute bin_to_nat (apply 12 incr Z).

query: (ObjList())
parsed: None
step 462
input: 



(* Do not modify the following line: *)
Definition manual_grade_for_binary : option (nat*string) := None.

query: (ObjList())
parsed: None
